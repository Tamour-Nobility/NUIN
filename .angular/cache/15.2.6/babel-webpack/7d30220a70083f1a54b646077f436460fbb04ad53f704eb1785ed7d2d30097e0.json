{"ast":null,"code":"var _a, _b, _c, _d;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild, HostListener } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { GvarsService } from '../../../app/services/G_vars/gvars.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { LoginViewModel, CurrentUserViewModel, AccessViewModel } from '../../models/auth/auth';\nimport { AuthService } from '../../services/auth/auth.service';\nimport { JwtHelper } from 'angular2-jwt';\nimport { Common } from '../../services/common/common';\nimport { TokenRequestModel } from '../../models/token/token.model';\nimport { ToastrService } from 'ngx-toastr';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { AlertService } from '../../services/data/Alert.service';\nconst strongRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\nlet LoginComponent = class LoginComponent {\n  constructor(GV, router, toastrService, activatedRoute, authService, alertService, Gv) {\n    this.GV = GV;\n    this.router = router;\n    this.toastrService = toastrService;\n    this.activatedRoute = activatedRoute;\n    this.authService = authService;\n    this.alertService = alertService;\n    this.Gv = Gv;\n    this.Year = new Date().getFullYear();\n    this.isCodeView = true;\n    this.isLoginView = false;\n    this.jwtHelper = new JwtHelper();\n    this.clicked = false;\n    this.isModalActive = false;\n    this.isAlertVisible = false;\n    this.config = {\n      allowNumbersOnly: true,\n      length: 6,\n      isPasswordInput: false,\n      disableAutoFocus: true,\n      placeholder: 0,\n      inputStyles: {\n        'width': '35px',\n        'height': '40px',\n        'border': '3px groove',\n        'background': 'rgba(255, 255, 255, 0.25)'\n      },\n      inputClass: 'each_input',\n      containerClass: 'all_inputs'\n    };\n    this.accessViewModel = new AccessViewModel();\n    this.loginViewModel = new LoginViewModel();\n    this.tokenRequestModel = new TokenRequestModel();\n  }\n  ngOnInit() {\n    this.activatedRoute.queryParams.subscribe(params => {\n      this.returnUrl = params['returnUrl'] || '/';\n    });\n    this.authService.Logout();\n    this.InitializeForm();\n  }\n  handleEscKey(event) {\n    debugger;\n    if (this.isAlertVisible) {\n      debugger;\n      this.proceedToAssignedModule();\n    }\n  }\n  GetAlertMessage() {\n    debugger;\n    this.alertService.getLoginAlert().subscribe(data => {\n      if (data.Status === 'Success' && data.Response && data.Response.length > 0) {\n        this.firstAlert = data.Response[0];\n        debugger;\n        // Check if the alert is not expired\n        if (this.isAlertNotExpired()) {\n          this.showAlert();\n          // this.show();\n        } else {\n          console.log('Alert is expired.');\n          this.proceedToAssignedModule(); // Proceed if no alert data\n        }\n      } else {\n        console.log('No alert data available.');\n        this.proceedToAssignedModule(); // Proceed if no alert data\n        debugger;\n      }\n    });\n  }\n  proceedToAssignedModule() {\n    // Logic to redirect to the assigned module\n    //  this.displayAlert.hide();\n    this.isAlertVisible = false;\n    // Redirect to the assigned module or dashboard here\n    this.authService.GetAuthorizedRoute(this.GV.currentUser.Menu[0]);\n  }\n  isAlertNotExpired() {\n    debugger;\n    console.log('this.firstAlert.EffectiveFrom', this.firstAlert.EffectiveFrom);\n    console.log('this.firstAlert.EffectiveTo', this.firstAlert.EffectiveTo);\n    console.log('new Date()', new Date());\n    debugger;\n    // Check if firstAlert or EffectiveFrom is null or undefined\n    if (!this.firstAlert || !this.firstAlert.EffectiveFrom) {\n      console.log('EffectiveFrom.jsdate is null or undefined');\n      return false; // Or handle it according to your requirements\n    }\n    // Parse the EffectiveFrom date string into a JavaScript Date object\n    const effectiveFromDate = new Date(this.firstAlert.EffectiveFrom);\n    // If EffectiveTo is not defined, consider the alert to be lifetime from EffectiveFrom date\n    if (!this.firstAlert.EffectiveTo) {\n      // Set the time to midnight for comparison\n      effectiveFromDate.setHours(0, 0, 0, 0);\n      const currentDate = new Date();\n      currentDate.setHours(0, 0, 0, 0);\n      return currentDate >= effectiveFromDate; // Display modal if current date is equal to or greater than EffectiveFrom date\n    }\n    // Parse the EffectiveTo date string into a JavaScript Date object\n    const effectiveToDate = new Date(this.firstAlert.EffectiveTo);\n    // Set the time to midnight for comparison\n    effectiveFromDate.setHours(0, 0, 0, 0);\n    effectiveToDate.setHours(0, 0, 0, 0);\n    const currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0);\n    // Check if the current date is between EffectiveFrom and EffectiveTo dates\n    return currentDate >= effectiveFromDate && currentDate <= effectiveToDate;\n  }\n  show() {\n    //set the modal body static.will close on click OK or Cross\n    const modalOptions = {\n      backdrop: 'static'\n    };\n    this.displayAlert.config = modalOptions;\n    this.displayAlert.show();\n  }\n  hide() {\n    this.displayAlert.hide();\n  }\n  InitializeForm() {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.maxLength(100), Validators.minLength(8), Validators.pattern(strongRegex)])\n    });\n    this.accesscode = new FormGroup({\n      code: new FormControl('', [Validators.required, Validators.maxLength(6), Validators.minLength(6)])\n    });\n  }\n  onOtpChange(event) {\n    this.accessViewModel.code = event;\n    if (this.accessViewModel.code.length == 6) {\n      this.onLoginClick();\n    }\n  }\n  toggleDisable() {\n    if (this.ngOtpInputRef.otpForm) {\n      if (this.ngOtpInputRef.otpForm.disabled) {\n        this.ngOtpInputRef.otpForm.enable();\n      } else {\n        this.ngOtpInputRef.otpForm.disable();\n      }\n    }\n  }\n  onResendOTP() {\n    this.clicked = true;\n    this.toggleDisable();\n    this.accesscode.disable({\n      emitEvent: true\n    });\n    this.authService.Resend('/Token/AuthCodeResend?userid=' + this.userId).subscribe(res => {\n      if (res != null) {\n        this.userId = res;\n        this.isCodeView = false;\n        this.toggleDisable();\n        this.isLoginView = true;\n        this.clicked = false;\n        this.InvalidLogin = false;\n        this.accesscode.reset({\n          emitEvent: true\n        });\n        this.ngOtpInputRef.setValue(null);\n        this.toastrService.success(\"Success\", \"OTP send Successfully\");\n        this.accesscode.enable({\n          emitEvent: true\n        });\n      }\n    }, err => {\n      this.toggleDisable();\n      if (err === 401) {\n        this.errorMessage = \"Invalid Username or Password\";\n      } else if (err == 400) {\n        this.errorMessage = 'Bad Request';\n        // this.toastrService.error( err ,  this.errorMessage)\n      } else if (err == 500) {\n        this.errorMessage = 'Internal Server Error';\n        // this.toastrService.error( err ,  this.errorMessage)\n      } else {\n        this.errorMessage = err;\n        // this.toastrService.error( err ,  this.errorMessage)\n      }\n\n      this.InvalidLogin = true;\n      this.clicked = false;\n      this.accesscode.enable({\n        emitEvent: true\n      });\n      setTimeout(() => {\n        this.InvalidLogin = false;\n      }, 4000);\n    }, () => {});\n  }\n  onClick() {\n    if (this.loginForm.valid) {\n      this.clicked = true;\n      this.loginForm.disable({\n        emitEvent: true\n      });\n      this.tokenRequestModel.Grant_Type = \"password\";\n      this.tokenRequestModel.Password = this.loginViewModel.Password;\n      this.tokenRequestModel.Username = this.loginViewModel.Username;\n      this.authService.Token(this.tokenRequestModel).subscribe(res => {\n        if (res != null) {\n          console.log(res);\n          this.userId = res.UserId / 23443;\n          this.email = res.email;\n          this.isCodeView = false;\n          this.isLoginView = true;\n          this.clicked = false;\n          this.InvalidLogin = false;\n          this.loginForm.enable({\n            emitEvent: true\n          });\n        }\n      }, err => {\n        if (err === 401) {\n          this.errorMessage = \"Invalid Username or Password\";\n        } else if (err == 400) {\n          this.errorMessage = 'Bad Request';\n          // this.toastrService.error( err ,  this.errorMessage)\n        } else if (err == 500) {\n          this.errorMessage = 'Internal Server Error';\n          // this.toastrService.error( err ,  this.errorMessage)\n        } else {\n          this.errorMessage = err;\n          // this.toastrService.error( err ,  this.errorMessage)\n        }\n\n        this.InvalidLogin = true;\n        this.clicked = false;\n        this.loginForm.enable({\n          emitEvent: true\n        });\n        setTimeout(() => {\n          this.InvalidLogin = false;\n        }, 4000);\n      }, () => {});\n    }\n  }\n  // onLoginClick() {\n  //   debugger\n  //   if (this.accessViewModel.code.length == 6) {\n  //     this.clicked = true;\n  //     this.toggleDisable();\n  //     this.accesscode.disable({ emitEvent: true });\n  //     this.accessViewModel.userid = this.userId;\n  //     console.log(this.accessViewModel)\n  //     this.authService.Code(this.accessViewModel).subscribe(\n  //       res => {\n  //         if (res != null) {\n  //           this.GV.currentUser = new CurrentUserViewModel();\n  //           let decStr = this.jwtHelper.decodeToken(res.Access_Token);\n  //           this.GV.currentUser.exp = decStr.exp;\n  //           this.GV.currentUser.iat = decStr.iat;\n  //           this.GV.currentUser.nbf = decStr.nbf;\n  //           this.GV.currentUser.role = decStr.role;\n  //           this.GV.currentUser.userId = decStr.UserId;\n  //           this.GV.currentUser.unique_name = decStr.unique_name;\n  //           this.GV.currentUser.Practices = res.Practices;\n  //           //Added by HAMZA ZULFIQAR as per USER STORY 119: Reporting Dashboard Implementation For All Practices\n  //           this.GV.external_practices=res.ExternalPractices\n  //           if (this.GV.currentUser.Practices.length > 0) {\n  //             this.GV.currentUser.selectedPractice = this.GV.currentUser.Practices[0];\n  //           }\n  //           this.GV.currentUser.RolesAndRights = res.RolesAndRights;\n  //           if (this.GV.currentUser.RolesAndRights.length > 0) {\n  //             localStorage.setItem('loginStatus', '1');\n  //             localStorage.setItem('jwt', res.Access_Token);\n  //             localStorage.setItem('refreshToken', res.Refresh_Token);\n  //             localStorage.setItem('pr', JSON.stringify(res.Practices));\n  //             localStorage.setItem('rr', JSON.stringify(res.RolesAndRights));\n  //             this.GV.currentUser.Menu = this.GV.currentUser.RolesAndRights.map(r => r.ModuleName);\n  //             this.GV.currentUser.Menu = this.GV.currentUser.Menu.filter(Common.Distinct);\n  //             this.authService.GetAuthorizedRoute( this.GV.currentUser.Menu[0]);\n  //             console.log(\"Welcome pir\");\n  //             // this.onClickAlert();\n  //             this.showAlert()\n  //             }\n  //           else {\n  //             this.clicked = false;\n  //             this.toggleDisable();\n  //             this.InvalidLogin = false;\n  //             this.accesscode.enable({ emitEvent: true });\n  //             swal(\"Authorization Access\", \"You don't have any assigned module. Please contact to the Administration.\", \"error\");\n  //           }\n  //         }\n  //       }, (err: any) => {\n  //         this.toggleDisable();\n  //         this.ngOtpInputRef.setValue(null);\n  //         if(err === 401){\n  //           this.errorMessage = \"Invalid OPT Code\";\n  //           // this.toastrService.info( err ,  this.errorMessageforOPT)\n  //         }else if(err == 400){\n  //           this.errorMessage = 'Bad Request';\n  //           // this.toastrService.error( err ,  this.errorMessageforOPT)\n  //         }\n  //         else if(err == 500){\n  //           this.errorMessage = 'Internal Server Error';\n  //           // this.toastrService.error( err ,  this.errorMessageforOPT)\n  //         }else{\n  //           this.errorMessage = err;\n  //           // this.toastrService.error( err ,  this.errorMessage)\n  //         }\n  //         this.InvalidLogin = true;\n  //         this.clicked = false;\n  //         this.accesscode.enable({ emitEvent: true });\n  //         setTimeout(() => {\n  //           this.InvalidLogin = false;\n  //         }, 4000);\n  //       }, () => {\n  //       }\n  //     );\n  //   }\n  // }\n  // onClickAlert() {\n  //   debugger\n  //   // this.modalService.open(this.alertModal, { centered: true });\n  //   this.displayAlert.show(); \n  //   this.isModalActive = true; // Show the modal\n  // }\n  // showAlert() {\n  //   debugger\n  //   //set the modal body static.will close on click OK or Cross\n  //   const modalOptions: ModalOptions = {\n  //     backdrop: 'static'\n  //   };\n  //   this.displayAlert.config = modalOptions;\n  // this.displayAlert.show();\n  // }\n  // onclose(){\n  //   this.displayAlert.hide();\n  // }\n  // Method to handle login\n  onLoginClick() {\n    if (this.accessViewModel.code.length === 6) {\n      this.clicked = true;\n      this.toggleDisable();\n      this.accesscode.disable({\n        emitEvent: true\n      });\n      this.accessViewModel.userid = this.userId;\n      this.authService.Code(this.accessViewModel).subscribe(res => {\n        if (res != null) {\n          this.GV.currentUser = new CurrentUserViewModel();\n          let decStr = this.jwtHelper.decodeToken(res.Access_Token);\n          this.GV.currentUser.exp = decStr.exp;\n          this.GV.currentUser.iat = decStr.iat;\n          this.GV.currentUser.nbf = decStr.nbf;\n          this.GV.currentUser.role = decStr.role;\n          this.GV.currentUser.userId = decStr.UserId;\n          this.GV.currentUser.unique_name = decStr.unique_name;\n          this.GV.currentUser.Practices = res.Practices;\n          this.GV.external_practices = res.ExternalPractices;\n          if (this.GV.currentUser.Practices.length > 0) {\n            this.GV.currentUser.selectedPractice = this.GV.currentUser.Practices[0];\n          }\n          this.GV.currentUser.RolesAndRights = res.RolesAndRights;\n          if (this.GV.currentUser.RolesAndRights.length > 0) {\n            // Store tokens and other information\n            localStorage.setItem('loginStatus', '1');\n            localStorage.setItem('jwt', res.Access_Token);\n            localStorage.setItem('refreshToken', res.Refresh_Token);\n            localStorage.setItem('pr', JSON.stringify(res.Practices));\n            localStorage.setItem('rr', JSON.stringify(res.RolesAndRights));\n            this.GV.currentUser.Menu = this.GV.currentUser.RolesAndRights.map(r => r.ModuleName);\n            this.GV.currentUser.Menu = this.GV.currentUser.Menu.filter(Common.Distinct);\n            // Show the alert before redirecting\n            this.GetAlertMessage();\n            //     this.showAlert();\n          } else {\n            this.handleNoAssignedModule();\n          }\n        }\n      }, err => this.handleError(err));\n    }\n  }\n  // Show alert modal\n  showAlert() {\n    debugger;\n    const modalOptions = {\n      backdrop: 'static'\n    };\n    this.displayAlert.config = modalOptions;\n    this.displayAlert.show();\n    this.isAlertVisible = true;\n  }\n  // Handle modal close and redirect\n  onclose() {\n    this.displayAlert.hide();\n    this.isAlertVisible = false;\n    // Redirect to the assigned module or dashboard here\n    this.authService.GetAuthorizedRoute(this.GV.currentUser.Menu[0]);\n  }\n  // Handle case when no assigned module\n  handleNoAssignedModule() {\n    this.clicked = false;\n    this.toggleDisable();\n    this.InvalidLogin = false;\n    this.accesscode.enable({\n      emitEvent: true\n    });\n    swal(\"Authorization Access\", \"You don't have any assigned module. Please contact to the Administration.\", \"error\");\n  }\n  // Handle errors\n  handleError(err) {\n    this.toggleDisable();\n    this.ngOtpInputRef.setValue(null);\n    if (err === 401) {\n      this.errorMessage = \"Invalid OPT Code\";\n    } else if (err == 400) {\n      this.errorMessage = 'Bad Request';\n    } else if (err == 500) {\n      this.errorMessage = 'Internal Server Error';\n    } else {\n      this.errorMessage = err;\n    }\n    this.InvalidLogin = true;\n    this.clicked = false;\n    this.accesscode.enable({\n      emitEvent: true\n    });\n    setTimeout(() => {\n      this.InvalidLogin = false;\n    }, 4000);\n  }\n};\n__decorate([ViewChild('ngOtpInput'), __metadata(\"design:type\", Object)], LoginComponent.prototype, \"ngOtpInputRef\", void 0);\n__decorate([ViewChild(ModalDirective), __metadata(\"design:type\", typeof (_d = typeof ModalDirective !== \"undefined\" && ModalDirective) === \"function\" ? _d : Object)], LoginComponent.prototype, \"displayAlert\", void 0);\n__decorate([HostListener('document:keydown.escape', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [KeyboardEvent]), __metadata(\"design:returntype\", void 0)], LoginComponent.prototype, \"handleEscKey\", null);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n}), __metadata(\"design:paramtypes\", [GvarsService, typeof (_a = typeof Router !== \"undefined\" && Router) === \"function\" ? _a : Object, typeof (_b = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _b : Object, typeof (_c = typeof ActivatedRoute !== \"undefined\" && ActivatedRoute) === \"function\" ? _c : Object, AuthService, AlertService, GvarsService])], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}