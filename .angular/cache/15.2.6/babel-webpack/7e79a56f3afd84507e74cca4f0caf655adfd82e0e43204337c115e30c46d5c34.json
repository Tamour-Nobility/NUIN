{"ast":null,"code":"import * as moment from 'moment';\nexport let Common = /*#__PURE__*/(() => {\n  class Common {\n    static isNullOrEmpty(str) {\n      return str == null || str == undefined || str == '' || str == 0 ? true : false;\n    }\n    static isNullOrEmptywithoutzero(str) {\n      return str == null || str == undefined || str == '' ? true : false;\n    }\n    static monthYearToDate(monthYear, delimeter) {\n      // split the month year based on delimeter\n      var my = monthYear.split(delimeter);\n      // parse the string date and get the number of miliseconds\n      var d = Date.parse(`${my[0]} 1, ${my[1]}`);\n      if (!isNaN(d)) {\n        return moment(new Date(d)).format(\"MM/DD/YYYY\");\n      }\n      return -1;\n    }\n  }\n  Common.Distinct = (value, index, self) => {\n    return self.indexOf(value) === index;\n  };\n  Common.SplitFullName = fullName => {\n    let names = [] = fullName.trim().split(',');\n    if (Array.isArray(names) && names.length) return {\n      lastName: names[0].trim(),\n      firstName: names[1].trim()\n    };\n    return {\n      lastName: \"\",\n      firstName: \"\"\n    };\n  };\n  Common.DateMask = event => {\n    var v = event.target.value;\n    if (v.match(/^\\d{2}$/) !== null) {\n      event.target.value = v + '/';\n    } else if (v.match(/^\\d{2}\\/\\d{2}$/) !== null) {\n      event.target.value = v + '/';\n    }\n  };\n  Common.encodeBase64 = plainText => {\n    return btoa(plainText);\n  };\n  Common.decodeBase64 = encodedText => {\n    return atob(encodedText);\n  };\n  return Common;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}