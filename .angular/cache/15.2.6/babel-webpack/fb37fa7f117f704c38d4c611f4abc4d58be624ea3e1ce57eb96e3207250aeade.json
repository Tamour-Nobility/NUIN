{"ast":null,"code":"var _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ChangeDetectorRef, Output, EventEmitter, Input } from '@angular/core';\nimport { searchFacilty } from './Classes/searchFacility';\nimport { saveFacilityModel } from './Classes/responseFacility';\nimport { APIService } from '../../components/services/api.service';\nimport { GvarsService } from '../../services/G_vars/gvars.service';\nimport { isNullOrUndefined } from 'util';\nimport { CurrentUserViewModel } from '../../models/auth/auth';\nimport { ToastrService } from 'ngx-toastr';\nlet FacilitiesComponent = class FacilitiesComponent {\n  constructor(chRef, API, Gv, toaster) {\n    this.chRef = chRef;\n    this.API = API;\n    this.Gv = Gv;\n    this.toaster = toaster;\n    this.showHideFacilityElements = false;\n    this.notifyParent = new EventEmitter();\n    this.onSelectFacility = new EventEmitter();\n    this.isFromAnotherComponent = '';\n    this.facilityName = 'Self';\n    this.PracticeCode = null;\n    // haserror:boolean=false;\n    this.editClick = false;\n    this.copyEdit = [];\n    this.checkedit = false;\n    this.firstRow = 1;\n    this.focusTimeFrameFS = false;\n    this.selectedRow = 0;\n    this.bIsRecordFound = false;\n    this.selectedFS = 0;\n    this.focusFacilityType = false;\n    this.selectedFac = 0;\n    this.isSearched = false;\n    this.FaciCodeTemp = \"\";\n    this.deleteRecord = true;\n    this.DatePickerOptions = {\n      dateFormat: 'mm/dd/yyyy',\n      height: '20px',\n      width: '100%',\n      border: 'none',\n      inline: false,\n      disabledDatePicker: false,\n      selectionTxtFontSize: '14px',\n      disableSince: {\n        year: new Date().getFullYear(),\n        month: new Date().getMonth() + 1,\n        day: new Date().getDate() + 1,\n        indicateInvalidDate: true\n      }\n    };\n    this.Dateoptions = {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    };\n    this.isSearchInitiated = false;\n    debugger;\n    this.searchCriteria = new searchFacilty();\n    this.responseFacility = [];\n    this.CityStateLst = [];\n    this.saveFacilityModel = new saveFacilityModel();\n    this.loggedInUser = new CurrentUserViewModel();\n    this.showHideFacilityElements = false;\n    this.zipFacilityData = [];\n  }\n  ngOnInit() {\n    debugger;\n    this.showHideFacilityElements = false;\n    this.searchCriteria.Response.PracticeCode = 0;\n    this.saveFacilityModel.Response.Practice_Code = 0;\n    this.facilityName = 'Self';\n    this.loggedInUser = this.Gv.currentUser;\n    this.loggedInUser.Practices = this.loggedInUser.Practices.map(practice => {\n      return Object.assign(Object.assign({}, practice), {\n        PracticeLabel: `${practice.PracticeCode} | ${practice.PracticeName}` // Add new combined property\n      });\n    });\n    //      if (this.facilityName === 'Self') {\n    //   this.searchCriteria.Response.PracticeCode = this.loggedInUser.selectedPractice.PracticeCode;\n    // }\n    console.log('NotifyParent isFromAnotherComponent', this.facilityName);\n    debugger;\n  }\n  ngViewInit() {\n    debugger;\n    this.showHideFacilityElements = false;\n    this.facilityName = 'Self';\n    console.log('NotifyParent isFromAnotherComponent viewinit', this.isFromAnotherComponent);\n    debugger;\n  }\n  SelectRow(index) {\n    if (!this.editClick) {\n      if (this.showHideFacilityElements) {\n        this.showHideFacilityElements = false;\n        this.deleteRecord = true;\n      }\n    }\n    this.editClick = false;\n    this.selectedFS = index;\n  }\n  SelectFS(index) {\n    this.selectedFS = index;\n  }\n  searchFacility(event) {\n    debugger;\n    if (event.keyCode == 13) {\n      //Enter key\n      this.getFacilities('true');\n    }\n  }\n  ClearFields() {\n    if (this.dtSearchFacility) this.dtSearchFacility.destroy();\n    this.responseFacility = [];\n    this.chRef.detectChanges();\n    this.dtSearchFacility = $('.dtSearchFacility').DataTable({\n      language: {\n        emptyTable: \"No data available\"\n      }\n    });\n    this.saveFacilityModel.Response.Created_By = \"\";\n    this.saveFacilityModel.Response.Created_Date = \"\";\n    if (this.facilityName === 'Self') {\n      this.saveFacilityModel.Response.Practice_Code = 0;\n      this.searchCriteria.Response.PracticeCode = 0;\n    }\n    this.saveFacilityModel.Response.Facility_Address = \"\";\n    this.saveFacilityModel.Response.Facility_City = \"\";\n    this.saveFacilityModel.Response.Facility_Code = undefined;\n    this.saveFacilityModel.Response.Facility_Contact_Name = \"\";\n    this.saveFacilityModel.Response.facility_id_number = \"\";\n    this.CityStateLst = [];\n    this.saveFacilityModel.Response.Facility_Name = \"\";\n    this.saveFacilityModel.Response.Facility_Phone = \"\";\n    this.saveFacilityModel.Response.Facility_State = \"\";\n    this.saveFacilityModel.Response.Facility_Type = \"\";\n    this.saveFacilityModel.Response.Facility_ZIP = \"\";\n    this.saveFacilityModel.Response.IS_DEMO = false;\n    this.saveFacilityModel.Response.NPI = \"\";\n    this.saveFacilityModel.Response.Modified_By = \"\";\n  }\n  formatNumber(phone) {\n    var newphone = \"\";\n    if (phone != undefined && phone != \"\") {\n      newphone = '(' + phone.substring(0, 3) + ') ' + phone.substring(3, 6) + '-' + phone.substring(6);\n    }\n    return newphone;\n  }\n  unformatNumber(phone) {\n    var newphone = \"\";\n    if (phone != undefined && phone != \"\") {\n      newphone = phone.replace('(', '').replace(')', '').replace('-', '').replace(' ', '');\n    }\n    return newphone;\n  }\n  formatPhoneNumber(phone, type) {\n    var value = phone;\n    if (phone.length >= 10) {\n      value = this.formatNumber(phone);\n    }\n    if (type == \"facility\") {\n      this.saveFacilityModel.Response.Facility_Phone = \"\";\n      this.saveFacilityModel.Response.Facility_Phone = value;\n    } else if (type == \"search\") {\n      this.searchCriteria.Response.Phone = \"\";\n      this.searchCriteria.Response.Phone = value;\n    }\n  }\n  EnableDisableFacilityElements(NewModifyCancel) {\n    debugger;\n    this.loggedInUser.Practices = this.loggedInUser.Practices.map(practice => {\n      return Object.assign(Object.assign({}, practice), {\n        PracticeLabel: `${practice.PracticeCode} | ${practice.PracticeName}` // Add new combined property\n      });\n    });\n\n    if (NewModifyCancel == \"New\") {\n      this.ClearFields();\n      this.ClearSearchFields();\n      this.isSearchInitiated = false;\n      if (this.facilityName === 'Claim') {\n        this.saveFacilityModel.Response.Practice_Code = this.loggedInUser.selectedPractice.PracticeCode;\n        this.searchCriteria.Response.PracticeCode = this.loggedInUser.selectedPractice.PracticeCode;\n      } else {\n        this.saveFacilityModel.Response.Practice_Code = 0;\n        this.searchCriteria.Response.PracticeCode = 0;\n      }\n      this.FacilityMode = \"New Facility Setup\";\n      this.responseFacility = [];\n      setTimeout(function () {\n        $(\"#saveFaciNameID\").focus();\n      }, 500);\n      this.showHideFacilityElements = true;\n    } else if (NewModifyCancel == \"Search\") {\n      this.responseFacility = [];\n    } else if (NewModifyCancel == \"Modify\") {\n      //  this.haserror=false;\n      this.showHideFacilityElements = true;\n      setTimeout(function () {\n        $(\"#saveFaciNameID input\").focus();\n      }, 500);\n      // this.showHideFacilityElements = true;\n    } else if (NewModifyCancel == \"Cancel\") {\n      debugger;\n      this.showHideFacilityElements = false;\n      if (this.dtSearchFacility) {\n        this.chRef.detectChanges();\n        this.dtSearchFacility.destroy();\n      }\n      this.chRef.detectChanges();\n      this.dtSearchFacility = $('.dtSearchFacility').DataTable({\n        language: {\n          emptyTable: \"No data available\"\n        }\n      });\n      if (this.saveFacilityModel.Response.Facility_Name === null || this.saveFacilityModel.Response.Facility_Name === '') {\n        if (this.facilityName === 'Claim') {\n          this.saveFacilityModel.Response.Practice_Code = this.loggedInUser.selectedPractice.PracticeCode;\n          this.searchCriteria.Response.PracticeCode = this.loggedInUser.selectedPractice.PracticeCode;\n        } else {\n          this.saveFacilityModel.Response.Practice_Code = 0;\n          this.searchCriteria.Response.PracticeCode = 0;\n        }\n      }\n      if (this.isSearchInitiated) {\n        this.getPracticeFacility();\n      }\n      this.deleteRecord = true;\n      this.editClick = false;\n      this.checkedit = false;\n      //   this.haserror=false;\n      setTimeout(function () {\n        $(\"#Code\").focus();\n      }, 1000);\n    } else {\n      this.showHideFacilityElements = false;\n    }\n  }\n  unformatZIPNumber_Search(zip, typee) {\n    var val = \"\";\n    if (typee == \"search\") {\n      val = this.unformatZip(zip);\n      this.searchCriteria.Response.ZIP = val;\n    }\n  }\n  unformatZIPNumber(zip, typee) {\n    var val = \"\";\n    if (typee == \"facility\") {\n      val = this.unformatZip(zip);\n      this.saveFacilityModel.Response.Facility_ZIP = val;\n    }\n  }\n  unformatPhoneNumber(phone, type) {\n    var value = \"\";\n    if (type == \"facility\") {\n      value = this.unformatNumber(phone);\n      this.saveFacilityModel.Response.Facility_Phone = value;\n    } else if (type == \"search\") {\n      value = this.unformatNumber(phone);\n      this.searchCriteria.Response.Phone = value;\n    }\n  }\n  unformatZip(zip) {\n    var newzip = \"\";\n    if (zip != undefined && zip != \"\") {\n      newzip = zip.replace('-', '').replace(' ', '');\n    }\n    return newzip;\n  }\n  ClearSearchFields() {\n    this.searchCriteria = new searchFacilty();\n    this.bIsRecordFound = false;\n    this.isSearchInitiated = false;\n    // this.haserror=false;\n    this.responseFacility = [];\n    this.totalPages = 1;\n    setTimeout(function () {\n      $(\"#Code\").focus();\n    }, 1000);\n    if (this.facilityName === 'Claim') {\n      this.showHideFacilityElements = false;\n      this.searchCriteria.Response.PracticeCode = this.loggedInUser.selectedPractice.PracticeCode;\n      this.saveFacilityModel.Response.Practice_Code = this.loggedInUser.selectedPractice.PracticeCode;\n    } else {\n      this.searchCriteria.Response.PracticeCode = 0;\n      this.saveFacilityModel.Response.Practice_Code = 0;\n    }\n    this.ClearFields();\n  }\n  GetCityState_Search(zipp) {\n    this.searchCriteria.Response.ZIP = this.formatZip(zipp);\n  }\n  formatZip(zip) {\n    var newzip = zip;\n    if (zip.length > 5 && zip.length < 10) {\n      newzip = zip.substring(0, 5) + '-' + zip.substring(5);\n    }\n    return newzip;\n  }\n  getFacilities(button) {\n    debugger;\n    let practiceCode = this.searchCriteria.Response.PracticeCode;\n    if (typeof practiceCode === 'string' && practiceCode.includes(' | ')) {\n      const practiceCodeString = practiceCode.split(' | ')[0]; // Extract the numeric part\n      practiceCode = parseInt(practiceCodeString, 10); // Convert to a number\n    }\n\n    if (this.facilityName === 'Claim') {\n      practiceCode = this.loggedInUser.selectedPractice.PracticeCode;\n    }\n    if ($.trim(this.searchCriteria.Response.FacilityCode) == \"\" && $.trim(this.searchCriteria.Response.FacilityName) == \"\" && $.trim(practiceCode) == 0 && $.trim(this.searchCriteria.Response.FacilityType) == \"\" && $.trim(this.searchCriteria.Response.ZIP) == \"\" && $.trim(this.searchCriteria.Response.City) == \"\" && $.trim(this.searchCriteria.Response.State) == \"\" && $.trim(this.searchCriteria.Response.Phone) == \"\" && $.trim(this.searchCriteria.Response.FacilityCode) == \"\" && $.trim(this.searchCriteria.Response.NPI) == \"\") {\n      $('#Code').focus();\n      //this.haserror=true;\n      swal('Facility Search', \"Please enter any search criteria.\", 'warning');\n      this.ClearFields();\n      //  this.responseFacility = [];\n      return;\n    }\n    this.isSearchInitiated = true;\n    debugger;\n    this.getPracticeFacility();\n  }\n  getPracticeFacility() {\n    debugger;\n    let practicecode = this.searchCriteria.Response.PracticeCode;\n    if (typeof this.searchCriteria.Response.PracticeCode === 'string' && this.searchCriteria.Response.PracticeCode.includes(' | ')) {\n      const practiceCodeString = this.searchCriteria.Response.PracticeCode.split(' | ')[0]; // Extract the numeric part\n      this.searchCriteria.Response.PracticeCode = parseInt(practiceCodeString, 10); // Convert to a number\n    }\n\n    this.API.PostData('/Demographic/SearchFacilities/', this.searchCriteria.Response, d => {\n      if (d.Status == \"Sucess\") {\n        debugger;\n        // this.haserror=false;\n        this.searchCriteria.Response.PracticeCode = practicecode;\n        debugger;\n        if (this.dtSearchFacility) {\n          this.chRef.detectChanges();\n          this.dtSearchFacility.destroy();\n        }\n        console.log('Search Facility response', d.response);\n        this.responseFacility = d.Response;\n        this.chRef.detectChanges();\n        this.dtSearchFacility = $('.dtSearchFacility').DataTable({\n          language: {\n            emptyTable: \"No data available\"\n          }\n        });\n      }\n    });\n  }\n  GetCityState(zip) {\n    debugger;\n    this.API.getData('/Demographic/GetCitiesByZipCode?ZipCode=' + zip).subscribe(data => {\n      debugger;\n      debugger;\n      if (data.Status == \"Sucess\") {\n        debugger;\n        if (data.Response.length == 0) {\n          this.toaster.error('Invalid Zip Code', `${zip}`);\n          // add by Hamza Akhlaq\n          this.saveFacilityModel.Response.Facility_ZIP = '';\n          return;\n        }\n        debugger;\n        this.zipFacilityData = data.Response;\n        this.saveFacilityModel.Response.Facility_City = this.zipFacilityData[0].CityName;\n        this.saveFacilityModel.Response.Facility_State = this.zipFacilityData[0].State;\n      } else {\n        this.saveFacilityModel.Response.Facility_City = \"\";\n        this.saveFacilityModel.Response.Facility_State = \"\";\n      }\n    });\n  }\n  SaveData() {\n    if (!this.canSave()) return;\n    debugger;\n    console.log('SAve Model', this.saveFacilityModel.Response);\n    if (this.facilityName === 'Claim') {\n      this.saveFacilityModel.Response.Practice_Code = this.loggedInUser.selectedPractice.PracticeCode;\n    }\n    this.API.PostData('/Setup/SaveFacility/', this.saveFacilityModel.Response, d => {\n      if (d.Status == \"Sucess\") {\n        swal('', 'Facility has been saved.', 'success');\n        this.EnableDisableFacilityElements('New');\n        this.showHideFacilityElements = false;\n      } else {\n        swal('Error', 'Facility was not saved', 'error');\n      }\n    });\n  }\n  canSave() {\n    debugger;\n    if (isNullOrUndefined(this.saveFacilityModel.Response.Practice_Code) || $.trim(this.saveFacilityModel.Response.Practice_Code) == 0) {\n      swal('Facility', 'Please select Facility Practice.', 'error');\n      return false;\n    }\n    if (isNullOrUndefined(this.saveFacilityModel.Response.Facility_Name) || $.trim(this.saveFacilityModel.Response.Facility_Name) == '') {\n      swal('Facility', 'Please enter Facility Name.', 'error');\n      return false;\n    }\n    if (isNullOrUndefined(this.saveFacilityModel.Response.Facility_Address) || $.trim(this.saveFacilityModel.Response.Facility_Address) == '') {\n      swal('Facility', 'Please enter Facility Address.', 'error');\n      return false;\n    }\n    if (isNullOrUndefined(this.saveFacilityModel.Response.Facility_Type) || $.trim(this.saveFacilityModel.Response.Facility_Type) == '' || $.trim(this.saveFacilityModel.Response.Facility_Type) == '0') {\n      swal('Facility', 'Please enter Facility Type.', 'error');\n      return false;\n    }\n    if (isNullOrUndefined(this.saveFacilityModel.Response.Facility_ZIP) || $.trim(this.saveFacilityModel.Response.Facility_ZIP) == '' || $.trim(this.saveFacilityModel.Response.Facility_ZIP) == '0') {\n      swal('Facility', 'Please enter Facility Zip Code.', 'error');\n      return false;\n    }\n    if (isNullOrUndefined(this.saveFacilityModel.Response.Facility_City) || $.trim(this.saveFacilityModel.Response.Facility_ZIP) == '' || $.trim(this.saveFacilityModel.Response.Facility_ZIP) == '0' || this.saveFacilityModel.Response.Facility_City == \"Select City\") {\n      swal('Facility', 'Please enter Facility City.', 'error');\n      return false;\n    }\n    if (isNullOrUndefined(this.saveFacilityModel.Response.NPI) || $.trim(this.saveFacilityModel.Response.NPI) == '') {\n      swal('Facility', 'Please enter NPI Code.', 'error');\n      return false;\n    }\n    return true;\n  }\n  EditRow(row) {\n    debugger;\n    if (row != undefined) {\n      debugger;\n      this.EnableDisableFacilityElements('Modify');\n      // document.getElementById(\"Modifybtn\").click();\n      this.copyEdit = this.responseFacility[row];\n      this.GetCityState(this.copyEdit.Facility_ZIP);\n      this.saveFacilityModel.Response = this.copyEdit;\n    }\n  }\n  sendNotification() {\n    this.notifyParent.emit('Close Model');\n  }\n  FillFacility(name, ID) {\n    this.Gv.FacilityCode = ID;\n    this.Gv.FacilityName = name;\n    this.sendNotification();\n    this.onSelectFacility.emit({\n      ID,\n      name\n    });\n    this.ClearSearchFields();\n  }\n  deleteFacility(FacilityId) {\n    if (FacilityId == undefined || FacilityId == null || FacilityId == 0) return;\n    this.API.confirmFun('Do you want to delete selected Facility?', '', () => {\n      this.API.getData('/Setup/DeleteFacility?FacilityId=' + FacilityId).subscribe(data => {\n        swal({\n          position: 'top-end',\n          type: 'success',\n          title: 'Selected Facility has been Deleted.',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        this.getFacilities('true');\n      });\n    });\n  }\n  onPracticeChange() {\n    debugger;\n    let practiceCode = this.searchCriteria.Response.PracticeCode;\n    if (typeof practiceCode === 'string' && practiceCode.includes(' | ')) {\n      const practiceCodeString = practiceCode.split(' | ')[0]; // Extract the numeric part\n      practiceCode = parseInt(practiceCodeString, 10); // Convert to a number\n    }\n\n    const selectedPracticeId = practiceCode;\n    // this.searchCriteria.Response.PracticeCode = event.target.value;\n    if (this.showHideFacilityElements === false) {\n      practiceCode = practiceCode;\n    } else {\n      this.saveFacilityModel.Response.Practice_Code = practiceCode;\n    }\n    console.log('Selected practice on facility', selectedPracticeId);\n  }\n  ngOnChanges(changes) {\n    debugger;\n    // Check if facilityName has been set\n    if (changes['facilityName'] && changes['facilityName'].currentValue) {\n      this.facilityName = changes['facilityName'].currentValue;\n      this.showHideFacilityElements = false;\n      this.saveFacilityModel.Response.Practice_Code = this.loggedInUser.selectedPractice.PracticeCode;\n      this.searchCriteria.Response.PracticeCode = this.loggedInUser.selectedPractice.PracticeCode;\n      console.log('facilityName is passed:', this.facilityName);\n    } else {\n      console.log('facilityName is not passed or is empty');\n    }\n  }\n};\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], FacilitiesComponent.prototype, \"notifyParent\", void 0);\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], FacilitiesComponent.prototype, \"onSelectFacility\", void 0);\n__decorate([Input(), __metadata(\"design:type\", String)], FacilitiesComponent.prototype, \"isFromAnotherComponent\", void 0);\n__decorate([Input(), __metadata(\"design:type\", String)], FacilitiesComponent.prototype, \"facilityName\", void 0);\nFacilitiesComponent = __decorate([Component({\n  selector: 'app-facilities',\n  templateUrl: './facilities.component.html',\n  styleUrls: ['./facilities.component.css']\n}), __metadata(\"design:paramtypes\", [ChangeDetectorRef, APIService, GvarsService, typeof (_a = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _a : Object])], FacilitiesComponent);\nexport { FacilitiesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}