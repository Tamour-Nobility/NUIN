{"ast":null,"code":"var _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\nimport { InsuranceModel } from '../../patient/Classes/patientInsClass';\nimport { APIService } from '../../components/services/api.service';\nimport { BaseComponent } from '../../core/base/base.component';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nlet InsuranceSearchComponent = class InsuranceSearchComponent extends BaseComponent {\n  constructor(API, chRef, toastService) {\n    super();\n    this.API = API;\n    this.chRef = chRef;\n    this.toastService = toastService;\n    this.blnEditDemoChk = false;\n    this.isSearchInitiated = false;\n    this.onSelectInsurance = new EventEmitter();\n  }\n  ngOnInit() {\n    this.searchModel = new InsuranceModel();\n    this.insurances = [];\n    this.initForm();\n  }\n  initForm() {\n    this.form = new FormGroup({\n      payerDesc: new FormControl('', [Validators.maxLength(250), Validators.required]),\n      insName: new FormControl('', [Validators.required]),\n      groupName: new FormControl('', [Validators.maxLength(50), Validators.required]),\n      zip: new FormControl('', [Validators.minLength(5), Validators.maxLength(9), Validators.required]),\n      state: new FormControl('', [Validators.maxLength(2), Validators.minLength(2), Validators.required]),\n      city: new FormControl('', [Validators.maxLength(50), Validators.required]),\n      address: new FormControl('', [Validators.maxLength(500), Validators.required]),\n      payerId: new FormControl('', [Validators.maxLength(50), Validators.required])\n    });\n  }\n  canSearch() {\n    let canSearch = false;\n    const {\n      controls\n    } = this.form;\n    for (const name in controls) {\n      if (controls[name].valid) {\n        canSearch = true;\n        break;\n      }\n    }\n    return canSearch;\n  }\n  searchInsurance() {\n    if (this.canSearch()) {\n      this.isSearchInitiated = true;\n      this.API.PostData('/Demographic/SearchInsurance/', this.searchModel, d => {\n        if (d.Status == \"success\") {\n          if (this.dataTable) {\n            this.chRef.detectChanges();\n            this.dataTable.destroy();\n          }\n          this.insurances = d.Response;\n          this.chRef.detectChanges();\n          const table = $('.dTSearchInsurace');\n          this.dataTable = table.DataTable({\n            language: {\n              emptyTable: \"No data available\"\n            },\n            order: [[1, 'asc']]\n          });\n        } else {\n          swal('Failed', d.Status, 'error');\n        }\n      });\n    } else {\n      this.toastService.warning('Please provide search criteria', 'Invalid Search Criteria');\n    }\n  }\n  clearForm() {\n    this.chRef.detectChanges();\n    if (this.dataTable) this.dataTable.destroy();\n    this.isSearchInitiated = false;\n    this.insurances = [];\n    this.form.reset();\n  }\n  onDblClickInsurance({\n    Inspayer_Description,\n    Insurance_Id\n  }) {\n    this.onSelectInsurance.emit({\n      Inspayer_Description,\n      Insurance_Id\n    });\n  }\n};\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], InsuranceSearchComponent.prototype, \"onSelectInsurance\", void 0);\nInsuranceSearchComponent = __decorate([Component({\n  selector: 'insurance-search',\n  templateUrl: './insurance-search.component.html',\n  styleUrls: ['./insurance-search.component.css']\n}), __metadata(\"design:paramtypes\", [APIService, ChangeDetectorRef, typeof (_a = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _a : Object])], InsuranceSearchComponent);\nexport { InsuranceSearchComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}