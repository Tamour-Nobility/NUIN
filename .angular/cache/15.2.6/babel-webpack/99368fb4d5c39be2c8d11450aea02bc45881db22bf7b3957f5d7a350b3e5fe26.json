{"ast":null,"code":"import * as moment from 'moment/moment';\nimport * as _ from 'lodash';\nimport { Ng2ImgToolsService } from 'ng2-img-tools';\nimport { CurrentUserViewModel } from '../../models/auth/auth';\nimport { environment } from '../../../environments/environment';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let GvarsService = /*#__PURE__*/(() => {\n  class GvarsService {\n    constructor(ng2ImgToolsService) {\n      this.ng2ImgToolsService = ng2ImgToolsService;\n      this.ERADownloadButton = JSON.parse(localStorage.getItem('ERADownloadButton'));\n      this.ERADownloadButtonTooltip = JSON.parse(localStorage.getItem('ERADownloadButtonTooltip'));\n      this.ERADownloadButtonStatus = [];\n      this.practiceChanged = new Subject();\n      this.ERAResponse = {\n        USER_NAME: '',\n        PracticeCode: '',\n        ENTRY_DATE: '',\n        DOWNLOADED_FILE_COUNT: '',\n        STATUS: '',\n        FTP_EXCEPTION: ''\n      };\n      this.OSCrowAdded = false;\n      this.OCrowAdded = false;\n      this.CCrowAdded = false;\n      this.VCrowAdded = false;\n      this.ProviderCode = 0;\n      this.canLogin = false;\n      this.money_Mask = {\n        align: \"left\",\n        prefix: 'Rs. ',\n        includeThousandsSeparator: true,\n        thousandsSeparatorSymbol: ',',\n        decimalSymbol: '.',\n        _requireDecimal: true,\n        get requireDecimal() {\n          return this._requireDecimal;\n        },\n        set requireDecimal(value) {\n          this._requireDecimal = value;\n        },\n        allowLeadingZeroes: true,\n        decimalLimit: 2\n      };\n      this.countnotifications = new Subject();\n      this.external_practices = [];\n      this.currentUser = new CurrentUserViewModel();\n    }\n    ngOnInit() {\n      JSON.parse(localStorage.getItem('ERADownloadButtonStatus')) != null ? this.ERADownloadButtonStatus = JSON.parse(localStorage.getItem('ERADownloadButtonStatus')) : this.ERADownloadButtonStatus = [];\n    }\n    setSelectedPractice(practice) {\n      this.currentUser.selectedPractice = practice;\n      this.practiceChanged.next(practice); // Notify subscribers\n    }\n    // Add a method to set the patient_account value\n    setPatientAccount(patientAccount) {\n      this.Patient_Account = patientAccount;\n    }\n    checkRole() {}\n    changeTo64(event, cb) {\n      let Myimg = event.target.files[0];\n      this.resize(Myimg, r => {\n        Myimg = r;\n        let myReader = new FileReader();\n        myReader.onloadend = e => {\n          if (cb) {\n            cb(myReader.result);\n          }\n        };\n        myReader.readAsDataURL(Myimg);\n      });\n    }\n    readAsDataURL(files, cb) {\n      let Myimg = files[0];\n      this.resize(Myimg, r => {\n        Myimg = r;\n        let myReader = new FileReader();\n        myReader.onloadend = e => {\n          if (cb) {\n            cb(myReader.result);\n          }\n        };\n        myReader.readAsDataURL(Myimg);\n      });\n    }\n    // ImgPath(img,def){return img?this.serverURL+'/render/'+img:def;}\n    ImgPath(img, def) {\n      return img ? environment.baseUrl + '/uploads/' + img : def;\n    }\n    Dformat(d) {\n      return moment(d).format('DD-MMM-YYYY ,hh:mm A');\n    }\n    CheckKeys(opj, arr) {\n      return _.findLast(_.map(arr, x => _.isEmpty(opj[x]) && !_.isNumber(opj[x]) ? x : false), x => x != false);\n    }\n    /*============================================*/\n    resize(img, cb) {\n      this.ng2ImgToolsService.resize([img], 400, 600).subscribe(cb);\n    }\n    isEmptyObject(obj) {\n      this.trimObj(obj);\n      return obj && Object.keys(obj).length === 0;\n    }\n    trimObj(obj) {\n      if (!Array.isArray(obj) && typeof obj != 'object') return obj;\n      return Object.keys(obj).reduce(function (acc, key) {\n        acc[key.trim()] = typeof obj[key] == 'string' ? obj[key].trim() : obj[key];\n        return acc;\n      }, Array.isArray(obj) ? [] : {});\n    }\n    GetToken() {\n      return localStorage.getItem('jwt');\n    }\n    checkSpcialChar(event) {\n      var regex = new RegExp(\"^[A-Za-z0-9? ,._-]+$\");\n      var str = String.fromCharCode(!event.charCode ? event.which : event.charCode);\n      if (!regex.test(str)) {\n        return false;\n      }\n    }\n    //commented below code by HAMZA ZULFIQAR and Added as per USER STORY 119: Reporting Dashboard Implementation For All Practices\n    // isReportingPerson() {\n    //   return (Number(this.currentUser.selectedPractice.PracticeCode) === 1011005);\n    // }\n    isReportingPerson() {\n      return this.currentUser.selectedPractice.PracticeCode == 1011005 ? true : false;\n      //Dynamic external practices checking commented for now.\n      //return this.external_practice?true:false;\n    }\n\n    IsbuttonDisable() {\n      debugger;\n      var result = this.currentUser.RolesAndRights.some(right => right.RoleName.toLowerCase() === \"billing demo\".toLowerCase());\n      return result;\n    }\n    //\n    alertRole() {\n      var result = this.currentUser.RolesAndRights.some(right => right.RoleName.toLowerCase() === \"Super Admin\".toLowerCase());\n      return result;\n    }\n  }\n  GvarsService.ɵfac = function GvarsService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  GvarsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GvarsService,\n    factory: GvarsService.ɵfac\n  });\n  return GvarsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}