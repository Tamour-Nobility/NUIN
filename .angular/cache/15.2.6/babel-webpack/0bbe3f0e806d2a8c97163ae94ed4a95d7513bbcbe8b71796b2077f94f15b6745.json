{"ast":null,"code":"var _a, _b, _c;\nimport { __decorate, __metadata } from \"tslib\";\nimport { ChangeDetectorRef, Component } from '@angular/core';\nimport { APIService } from '../components/services/api.service';\nimport { Common } from '../services/common/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CustomEdits_FrontEnd, CustomEdits_FrontEndList } from '../models/custom-edits-front-end';\nimport { ToastrService } from 'ngx-toastr';\nlet CustomEditsComponent = class CustomEditsComponent {\n  constructor(API, route, router, cd, toaster) {\n    this.API = API;\n    this.route = route;\n    this.router = router;\n    this.cd = cd;\n    this.toaster = toaster;\n    this.showConfirmation = false;\n    this.numRowsToDisplay = 0;\n    this.customedits = [new CustomEdits_FrontEnd()];\n    this.customEditsList = new CustomEdits_FrontEndList();\n    this.SelectedColumn1 = null;\n    this.Operators = [{\n      value: '>',\n      displayName: 'Greater than'\n    }, {\n      value: '<',\n      displayName: 'Less than'\n    }, {\n      value: '=',\n      displayName: 'Equal'\n    }, {\n      value: '<>',\n      displayName: 'Not Equal'\n    }, {\n      value: '>=',\n      displayName: 'Greater than or equal to'\n    }, {\n      value: '<=',\n      displayName: 'Less than or equal to'\n    }];\n    this.SelectedColumn2 = null;\n    this.TableList = [];\n    this.ColumnName_List = [];\n    this.ColumnName_List1 = [];\n    this.columnList = [];\n    this.CustomValue = 'CustomValue';\n    this.UserDefineValue = [];\n    this.isViewMode = false;\n    this.isFromposting = false;\n    this.CustomEdits_FrontEnd = [new CustomEdits_FrontEnd()];\n    this.customEdits_Edit = [];\n    this.CustomEditsdata = [];\n    this.Menus = [];\n    this.disableCrossButton = false;\n    this.today = new Date();\n    this.myDatePickerOptions = {\n      dateFormat: 'yyyy-mm-dd',\n      height: '25px',\n      width: '100%',\n      disableSince: {\n        day: this.today.getDate() + 1,\n        month: this.today.getMonth() + 1,\n        year: this.today.getFullYear()\n      }\n    };\n    this.customFormValues = [];\n    this.ViewMode = false;\n    this.CancelViewMode = false;\n    this.customedits = [];\n    this.route.params.subscribe(params => {\n      this.id = params['id'];\n      this.type = params['type'];\n    });\n  }\n  ngOnInit() {\n    this.getColumnList();\n    this.getTableList();\n    this.AddRowForCustomEdits();\n    if (this.type == 'edit') {\n      this.getEditDataById();\n    }\n    if (this.type == 'view') {\n      this.getEditDataForView();\n    }\n  }\n  HandlePriviousselectionofEntity(ndx) {\n    if (this.customedits[ndx].Entity1 !== '' || this.customedits[ndx].Entity1 !== null || this.customedits[ndx].Entity1 !== undefined) {\n      this.customedits[ndx].Field1 = \"\";\n    }\n  }\n  HandlePriviousselectionofEntityForEntity2(ndx) {\n    if (this.customedits[ndx].Entity2 !== '' || this.customedits[ndx].Entity2 !== null || this.customedits[ndx].Entity2 !== undefined) {\n      this.customedits[ndx].Field2 = \"\";\n    }\n  }\n  SelectemptyValueCase(value, ndx) {\n    debugger;\n    if (value == \"\" || value == undefined) {\n      this.customedits[ndx].Field1 = \"\";\n    }\n  }\n  SelectemptyValueCase1(value, ndx) {\n    debugger;\n    if (value == \"\" || value == undefined) {\n      this.customedits[ndx].Field2 = \"\";\n    }\n  }\n  AddRowForCustomEdits() {\n    debugger;\n    if (this.customedits.length === 0) {\n      this.customedits.push(new CustomEdits_FrontEnd());\n    } else if (this.customedits.length && this.customedits.length < 5) {\n      const firstRow = this.customedits[0];\n      const newIndex = this.customedits.indexOf(this.customedits[this.customedits.length - 1]);\n      if (this.customedits[newIndex].Field1 != null && this.customedits[newIndex].Field1 !== '' && this.customedits[newIndex].Operator != '' && this.customedits[newIndex].Operator != null) {\n        this.customedits.push(new CustomEdits_FrontEnd());\n      }\n    }\n  }\n  updateCustomRulesProperty(ndx, property, value) {\n    debugger;\n    this.customedits[ndx] = Object.assign(Object.assign({}, this.customedits[ndx]), {\n      [property]: value || null\n    });\n    this.cd.detectChanges();\n  }\n  getTableList() {\n    debugger;\n    this.API.getData('/Scrubber/GetTableList').subscribe(data => {\n      if (data && Array.isArray(data.Response)) {\n        this.TableList = data.Response;\n      }\n    });\n  }\n  getColumsList_againstTable(getcolumnlist, ndx, property) {\n    debugger;\n    const apiUrl = '/Scrubber/GetColumsList';\n    const requestData = {\n      TableName: getcolumnlist.Entity1\n    };\n    this.API.PostData(apiUrl, requestData, columns => {\n      this.updateCustomRulesProperty(ndx, property, columns.Response);\n    });\n  }\n  getColumsList_on_Edit(getcolumnlist, ndx, property) {\n    debugger;\n    const apiUrl = '/Scrubber/GetColumsList';\n    const requestData = {\n      TableName: getcolumnlist\n    };\n    this.API.PostData(apiUrl, requestData, columns => {\n      //  this.updateCustomRulesProperty(ndx,property,columns.Response);\n      debugger;\n      this.customedits[ndx].ColumnName_List = columns.Response;\n    });\n  }\n  getColumsList_on_EditForList1(getcolumnlist1, ndx, property) {\n    debugger;\n    const apiUrl = '/Scrubber/GetColumsList';\n    const requestData = {\n      TableName: getcolumnlist1\n    };\n    this.API.PostData(apiUrl, requestData, columns => {\n      //  this.updateCustomRulesProperty(ndx,property,columns.Response);\n      debugger;\n      this.customedits[ndx].ColumnName_List1 = columns.Response;\n    });\n  }\n  getColumsList_againstTable1(getcolumnlist1, ndx, property) {\n    const apiUrl = '/Scrubber/GetColumsList';\n    const requestData = {\n      TableName: getcolumnlist1.Entity2\n    };\n    this.API.PostData(apiUrl, requestData, columns => {\n      this.updateCustomRulesProperty(ndx, property, columns.Response);\n    });\n  }\n  AddCustomEdits() {\n    for (let i = 0; i < this.customedits.length; i++) {\n      const a = this.customedits[i];\n      if (Array.isArray(a.Field1)) {\n        a.Field1 = a.Field1.join();\n      }\n      if (Array.isArray(a.Field2)) {\n        a.Field2 = a.Field2.join();\n      }\n    }\n    this.customEditsList.Gcc_id = this.EditID;\n    this.getValue('PracticeCode');\n    this.customEditsList.Practice_Code = this.PracticeCode;\n    this.customEditsList.EditName = this.Editname;\n    this.customEditsList.EditDescirption = this.Editdescription;\n    this.customEditsList.EditErrorMassage = this.ErrorMessage;\n    this.customEditsList.customedits = this.customedits;\n    for (let ndx = 0; ndx < this.customedits.length; ndx++) {\n      const customedits = this.customedits[ndx];\n      if (customedits.Entity1 == null || customedits.Entity1 == undefined || customedits.Entity1 == \"\") {\n        this.toaster.error(\"Entity1 is Empty\");\n        return;\n      }\n      if (customedits.Field1 == null || customedits.Field1 == undefined || customedits.Field1 == \"\") {\n        this.toaster.error(\"Field1 is Empty\");\n        return;\n      }\n      if (customedits.Field1 == 'DOS' || customedits.Field1 == 'DeathDate' || customedits.Field1 == 'Date_Of_Birth' || customedits.Field1 == 'Bill_Date' || customedits.Field1 == 'Hospital_From' || customedits.Field1 == 'Hospital_To' || customedits.Field1 == 'Accident_Date' || customedits.Field1 == 'Last_Seen_Date' || customedits.Field1 == 'Current_Illness_Date' || customedits.Field1 == 'Injury_Date') {\n        if (customedits.Operator == null || customedits.Operator == undefined || customedits.Operator == \"\") {\n          this.toaster.error(\"Operator is Empty\");\n          return;\n        }\n        if (customedits.Entity2 !== null && customedits.Entity2 !== undefined && customedits.Entity2 !== \"\") {\n          if (customedits.Field2 == null || customedits.Field2 == undefined || customedits.Field2 == \"\") {\n            this.toaster.error(\"Field2 is Empty\");\n            return;\n          }\n        }\n        if (this.Editname === null || this.Editname === \"\" || this.Editname === undefined) {\n          this.toaster.error(\"Edit Name is Empty\");\n          return;\n        }\n        if (this.Editdescription === null || this.Editdescription === \"\" || this.Editdescription === undefined) {\n          this.toaster.error(\"Edit Description is Empty\");\n          return;\n        }\n        if (this.ErrorMessage === null || this.ErrorMessage === \"\" || this.ErrorMessage === undefined) {\n          this.toaster.error(\"Error Message is Empty\");\n          return;\n        }\n      } else {\n        if (customedits.Entity1 == null || customedits.Entity1 == undefined || customedits.Entity1 == \"\") {\n          this.toaster.error(\"Entity1 is Empty\");\n          return;\n        }\n        if (customedits.Operator == null || customedits.Operator == undefined) {\n          this.toaster.error(\"Operator is Empty\");\n          return;\n        }\n        if (customedits.Value == null || customedits.Value == undefined || customedits.Value === \"\") {\n          if (customedits.Entity2 == null || customedits.Entity2 == undefined || customedits.Entity2 === \"\" && customedits.Field2 == null || customedits.Field2 == undefined || customedits.Field2 === \"\") {\n            this.toaster.error(\"Entity2 & Field2 is Empty\");\n            return;\n          }\n        }\n        if (customedits.Entity2 == null || customedits.Entity2 == undefined && customedits.Field2 == null || customedits.Field2 == undefined) {\n          if (customedits.Value == null && customedits.Value == undefined) {\n            this.toaster.error(\"Value is Empty\");\n            return;\n          }\n        }\n        if (customedits.Entity2 !== null && customedits.Entity2 !== undefined) {\n          if (customedits.Field2 == null || customedits.Field2 == undefined) {\n            this.toaster.error(\"Field2 is Empty\");\n            return;\n          }\n        }\n        if (this.Editname === null || this.Editname === \"\" || this.Editname === undefined) {\n          this.toaster.error(\"Edit Name is Empty\");\n          return;\n        }\n        if (this.Editdescription === null || this.Editdescription === \"\" || this.Editdescription === undefined) {\n          this.toaster.error(\"Edit Description is Empty\");\n          return;\n        }\n        if (this.ErrorMessage === null || this.ErrorMessage === \"\" || this.ErrorMessage === undefined) {\n          this.toaster.error(\"Error Message is Empty\");\n          return;\n        }\n      }\n    }\n    this.API.PostData('/Scrubber/AddCustom_Edits_Rules/', this.customEditsList, d => {\n      this.router.navigateByUrl('claimsubmission/scrubber/update');\n    });\n    this.CancelViewMode = true;\n  }\n  resetFields() {\n    this.customEditsList.Gcc_id = '';\n    this.PracticeCode = '';\n    this.Editname = '';\n    this.Editdescription = '';\n    this.ErrorMessage = '';\n    if (this.customedits && this.customedits.length > 0) {\n      for (let i = 0; i < this.customedits.length; i++) {\n        this.customedits[i] = new CustomEdits_FrontEnd();\n      }\n    }\n    this.customEditsList = {\n      Gcc_id: '',\n      Practice_Code: '',\n      EditName: '',\n      EditDescirption: '',\n      EditErrorMassage: '',\n      customedits: this.customedits\n    };\n  }\n  CancelFields() {\n    this.customEditsList.Gcc_id = '';\n    this.PracticeCode = '';\n    this.Editname = '';\n    this.Editdescription = '';\n    this.ErrorMessage = '';\n    if (this.customedits && this.customedits.length > 0) {\n      for (let i = 0; i < this.customedits.length; i++) {\n        this.customedits[i] = new CustomEdits_FrontEnd();\n      }\n    }\n    this.customEditsList = {\n      Gcc_id: '',\n      Practice_Code: '',\n      EditName: '',\n      EditDescirption: '',\n      EditErrorMassage: '',\n      customedits: this.customedits\n    };\n    swal('Validation', 'From Date cannot be greater than To Date', 'warning');\n  }\n  confirmFun(title, text, yesCallback, noCallback) {\n    swal({\n      title: title,\n      text: text,\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No, keep it'\n    }).then(result => {\n      if (result.value) {\n        // User clicked \"Yes\"\n        yesCallback();\n      } else {\n        // User clicked \"No, keep it\"\n        noCallback();\n      }\n    });\n  }\n  showConfirmationDialog() {\n    this.confirmFun('Confirmation', 'Are you sure you want to cancel?', () => {\n      this.onYesClick();\n    }, () => {\n      this.onNoClick();\n    });\n  }\n  onNoClick() {\n    this.router.navigateByUrl('claimsubmission/scrubber/update');\n    // this.resetFields();\n  }\n\n  onYesClick() {}\n  getValue(key) {\n    if (localStorage.getItem('sp') === null) {\n      this.PracticeCode = {\n        PracticeCode: '1010999'\n      };\n      this.PracticeCode = Number(this.PracticeCode['PracticeCode']);\n    } else {\n      this.PracticeCode = JSON.parse(localStorage.getItem('sp'));\n      this.PracticeCode = this.PracticeCode['PracticeCode'];\n      this.PracticeCode = Number(this.PracticeCode);\n    }\n  }\n  getEditDataById() {\n    this.API.getData('/Scrubber/GetCustomRuleById/' + this.id).subscribe(data => {\n      this.customedits = this.mapDataToCustomEdits(data.Response);\n      this.ViewMode = false;\n      this.disableCrossButton = true;\n    });\n  }\n  mapDataToCustomEdits(data) {\n    let ind = 0;\n    return data.map(item => {\n      debugger;\n      const customEditsList = new CustomEdits_FrontEndList();\n      const customEdit = new CustomEdits_FrontEnd();\n      customEdit.Entity1 = item.Entity1;\n      customEdit.ColumnName_List[ind] = item.Field1;\n      customEdit.Field1 = customEdit.ColumnName_List[ind];\n      customEdit.Operator = item.Operator;\n      customEdit.Value = item.Value;\n      customEdit.Entity2 = item.Entity2;\n      customEdit.ColumnName_List1[ind] = item.Field2;\n      customEdit.Field2 = customEdit.ColumnName_List1[ind];\n      customEdit.Edit_id = item.Edit_id;\n      if (item.Edit_Name != '' && item.Edit_Name != '') {\n        this.Editname = item.Edit_Name;\n        this.Editdescription = item.Edit_Description;\n        this.ErrorMessage = item.ErrorMessage;\n      }\n      this.EditID = item.Gc_id;\n      customEditsList.customedits.push(customEdit);\n      this.getColumsList_on_Edit(customEdit.Entity1, ind, this.ColumnName_List);\n      this.getColumsList_on_EditForList1(customEdit.Entity2, ind, this.ColumnName_List1);\n      ind++;\n      return customEdit;\n    });\n  }\n  DeleteRowOfCustomRule(index) {\n    if (index >= 0 && index < this.customedits.length) {\n      if (this.customedits.length > 1) {\n        this.customedits.splice(index, 1);\n      }\n    }\n  }\n  getEditDataForView() {\n    this.API.getData('/Scrubber/GetCustomRuleById/' + this.id).subscribe(data => {\n      this.customedits = this.mapDataToCustomEdits(data.Response);\n      this.ViewMode = true;\n      this.disableCrossButton = true;\n    });\n  }\n  onDateChangedForDate(event, ndx) {\n    debugger;\n    this.customedits[ndx].Value = event.formatted;\n    this.updateCustomRulesDateValue(ndx);\n  }\n  updateCustomRulesDateValue(ndx) {\n    debugger;\n    this.customedits[ndx] = Object.assign({}, this.customedits[ndx]);\n    this.cd.detectChanges();\n  }\n  getColumnList() {\n    this.API.getData('/Scrubber/GetColumn_Lists_FrontEnd').subscribe(data => {\n      // console.log(\"data.Response\",data)\n      this.ColumnName_List = data;\n      // this.ColumnName_List.Table_Name=data;\n      console.log(\"ColumnName_List\", this.ColumnName_List);\n    });\n  }\n  getCustomEdits() {\n    debugger;\n    this.API.getData('/Scrubber/GetAllCustomEdits').subscribe(data => {\n      this.CustomEditsdata = data;\n    });\n  }\n  dateMask(event) {\n    Common.DateMask(event);\n  }\n  isDisabled(entity2Value) {\n    // If entity2Value is empty, return true (disabled), otherwise return false (enabled)\n    return !!entity2Value;\n  }\n};\nCustomEditsComponent = __decorate([Component({\n  selector: 'app-custom-edits',\n  templateUrl: './custom-edits.component.html',\n  styleUrls: ['./custom-edits.component.css']\n}), __metadata(\"design:paramtypes\", [APIService, typeof (_a = typeof ActivatedRoute !== \"undefined\" && ActivatedRoute) === \"function\" ? _a : Object, typeof (_b = typeof Router !== \"undefined\" && Router) === \"function\" ? _b : Object, ChangeDetectorRef, typeof (_c = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _c : Object])], CustomEditsComponent);\nexport { CustomEditsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}