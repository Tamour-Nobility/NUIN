{"ast":null,"code":"var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ChangeDetectorRef, ViewChild } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { APIService } from '../../components/services/api.service';\nimport { GvarService } from '../../components/services/GVar/gvar.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { PracticeFacility, PracticeFacilityModel, GetPracticeFacilites } from '../Facilities/Classes/FacilitiesModel';\nimport { FacilitiesComponent } from '../../setups/Facility/facilities.component';\nimport 'datatables.net';\nlet PracFacilitiesComponent = class PracFacilitiesComponent {\n  constructor(chRef, datepipe, router, route, API, Gv) {\n    this.chRef = chRef;\n    this.datepipe = datepipe;\n    this.router = router;\n    this.route = route;\n    this.API = API;\n    this.Gv = Gv;\n    this.selectedClassName = 'New';\n    this.isAdd = false;\n    this.isList = true;\n    this.myDatePickerOptions = {\n      dateFormat: 'mm/dd/yyyy',\n      height: '25px',\n      width: '93%'\n    };\n    this.practiceFacility = new PracticeFacility();\n    this.practiceFacilityModel = new PracticeFacilityModel();\n    this.objGetPracticeFacilites = new GetPracticeFacilites();\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['id'] !== 0 && params['id'] !== '0') {\n        this.SelectedPracticeCode = params['id'];\n        this.GetPracticeFacilityList();\n        this.showList();\n      }\n    });\n  }\n  GetPracticeFacilityList() {\n    if (this.SelectedPracticeCode == null || this.SelectedPracticeCode == 0 || this.SelectedPracticeCode == undefined) return;\n    this.showList();\n    this.API.getData('/PracticeSetup/GetPracticeFacilityList?PracticeId=' + this.SelectedPracticeCode).subscribe(data => {\n      if (data.Status === 'Sucess' || data.Status === 'No Data Found') {\n        if (this.dataTable) {\n          this.chRef.detectChanges();\n          this.dataTable.destroy();\n        }\n        this.practiceFacilityModel.Response = data.Response;\n        this.chRef.detectChanges();\n        const table = $('.facilitytbl');\n        this.dataTable = table.DataTable({\n          language: {\n            emptyTable: \"No data available\"\n          }\n        });\n      } else {\n        swal('Failed', data.Status, 'error');\n      }\n    });\n  }\n  showList() {\n    this.isList = true;\n    this.isAdd = false;\n  }\n  showAdd() {\n    this.isList = false;\n    this.isAdd = true;\n  }\n  AddUpdateFacility() {\n    if (this.SelectedPracticeCode == undefined || this.SelectedPracticeCode == null || this.SelectedPracticeCode == 0) {\n      swal('Failed', \"Please add Practice first.\", 'error');\n      return;\n    }\n    this.objGetPracticeFacilites.PracticeFacilityCode = this.SelectedPracticeCode;\n    this.practiceFacility.PracticeFacilityCode = this.SelectedPracticeCode;\n    this.objGetPracticeFacilites.FacilityCode = this.practiceFacility.Facility_Code;\n    this.objGetPracticeFacilites.resp = this.practiceFacility;\n    this.API.PostData('/PracticeSetup/SavePracticeFacility/', this.objGetPracticeFacilites, d => {\n      if (d.Status === 'Sucess') {\n        this.GetPracticeFacilityList();\n      } else {\n        swal('Failed', d.Status, 'error');\n      }\n    });\n  }\n  // Get City State zIP\n  onBlurMethod() {\n    this.API.getData('/Demographic/GetCityState?ZipCode=' + this.practiceFacility.Facility_ZIP).subscribe(data => {\n      if (data.Status === 'Sucess') {\n        this.zipData = data.Response;\n        this.practiceFacility.Facility_City = this.zipData.CityName;\n        this.practiceFacility.Facility_State = this.zipData.State;\n      } else {\n        this.practiceFacility.Facility_City = '';\n        this.practiceFacility.Facility_State = '';\n      }\n    });\n  }\n  GetPracticeFacility(PracticeFacilityId) {\n    this.API.getData('/PracticeSetup/GetPracticeFacility?PracticeId=' + this.SelectedPracticeCode + '&PracticeFacilityId=' + PracticeFacilityId).subscribe(data => {\n      if (data.Status === 'Sucess') {\n        this.practiceFacility = data.Response;\n      } else {\n        swal('Failed', data.Status, 'error');\n      }\n    });\n  }\n  EditFacility(PracticeFacilityId) {\n    this.showAdd();\n    this.GetPracticeFacility(PracticeFacilityId);\n  }\n  FacilityEmptyModel() {\n    this.showAdd();\n    this.practiceFacility = new PracticeFacility();\n  }\n  ViewFacility(PracticeFacilityId) {\n    this.showAdd();\n    this.GetPracticeFacility(PracticeFacilityId);\n  }\n  resetFields() {\n    this.showList();\n    this.practiceFacility = new PracticeFacility();\n  }\n  DeleteFacility(PracticeFacilityId) {\n    this.API.confirmFun('Do you want to delete this Facility ?', '', () => {\n      this.API.getData('/PracticeSetup/DeletePracticeFacility?PracticeId=' + this.SelectedPracticeCode + '&PracticeFacilityId=' + PracticeFacilityId).subscribe(data => {\n        if (data.Status === 'Sucess') {\n          this.GetPracticeFacilityList();\n        } else {\n          swal('Failed', data.Status, 'error');\n        }\n      });\n    });\n  }\n  getNotificationFacility(val) {\n    if (this.API.Gv.FacilityCode != undefined && this.API.Gv.FacilityCode != 0 && this.API.Gv.FacilityCode != null) this.getPracticeFacility(this.API.Gv.FacilityCode);else this.practiceFacility = new PracticeFacility();\n    document.getElementById(\"facilityClose\").click();\n  }\n  showFacility() {\n    document.getElementById(\"Facilities\").click();\n  }\n  getPracticeFacility(PracticeFacilityId) {\n    this.API.getData('/Setup/GetFacility?FacilityId=' + PracticeFacilityId).subscribe(data => {\n      if (data.Status === 'Sucess') {\n        this.practiceFacility = data.Response;\n      } else {\n        swal('Failed', data.Status, 'error');\n      }\n    });\n  }\n};\n__decorate([ViewChild(FacilitiesComponent), __metadata(\"design:type\", Object)], PracFacilitiesComponent.prototype, \"GurChild\", void 0);\nPracFacilitiesComponent = __decorate([Component({\n  selector: 'app-facility',\n  templateUrl: './facilities.component.html',\n  styleUrls: ['./facilities.component.css']\n}), __metadata(\"design:paramtypes\", [ChangeDetectorRef, DatePipe, typeof (_a = typeof Router !== \"undefined\" && Router) === \"function\" ? _a : Object, typeof (_b = typeof ActivatedRoute !== \"undefined\" && ActivatedRoute) === \"function\" ? _b : Object, APIService, GvarService])], PracFacilitiesComponent);\nexport { PracFacilitiesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}