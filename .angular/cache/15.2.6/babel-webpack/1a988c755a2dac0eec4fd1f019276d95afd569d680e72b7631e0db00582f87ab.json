{"ast":null,"code":"var _a, _b, _c;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild, ElementRef, ChangeDetectorRef, EventEmitter, Output } from '@angular/core';\nimport { AuthService } from '../../services/auth/auth.service';\nimport { GvarsService } from '../../services/G_vars/gvars.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatchPassword } from '../../validators/password.validator';\nimport { ResetPasswordForUserViewModel } from '../../../app/user-management/classes/requestResponse';\nimport { ToastrService } from 'ngx-toastr';\nimport { APIService } from '../../components/services/api.service';\nimport { ClaimService } from '../../services/claim/claim.service';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { LoginAlertModel } from '../../patient/Classes/Alert';\nimport { Common } from '../../services/common/common';\nconst strongRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&-_\\*])(?=.{8,})\");\nlet NavbarComponent = class NavbarComponent {\n  constructor(authService, apiService, gvService, cd, toaster, modalService, claimservice) {\n    this.authService = authService;\n    this.apiService = apiService;\n    this.gvService = gvService;\n    this.cd = cd;\n    this.toaster = toaster;\n    this.modalService = modalService;\n    this.claimservice = claimservice;\n    this.loginalertmodel = new LoginAlertModel();\n    this.alertDataEvent = new EventEmitter();\n    this.isSetup = false;\n    this.collapse = true;\n    this.isDisabled = false;\n    this.count = 0;\n    this.countclaimnotifications = 0;\n    this.countaccountnotifications = 0;\n    this.isModalActive = false;\n    this.isExpired = false;\n    this.isCreateMode = true;\n    this.selDateDD = {\n      day: 0,\n      month: 0,\n      year: 0\n    };\n    this.selDateET = {\n      day: 0,\n      month: 0,\n      year: 0\n    };\n    this.today = new Date();\n    this.myDateRangePickerOptions = {\n      dateFormat: 'mm/dd/yyyy',\n      height: '25px',\n      width: '100%',\n      disableUntil: {\n        year: this.today.getFullYear(),\n        month: this.today.getMonth() + 1,\n        day: this.today.getDate() - 1\n      },\n      editableDateField: false // This prevents manual input of dates\n    };\n\n    this.myDatePickerOptions = {\n      disableUntil: {\n        year: this.today.getFullYear(),\n        month: this.today.getMonth() + 1,\n        day: this.today.getDate() - 1\n      },\n      editableDateField: false // This prevents manual input of dates\n    };\n\n    this.myDateRangePickerOptions1 = {\n      dateFormat: 'mm/dd/yyyy',\n      height: '25px',\n      width: '100%',\n      disableUntil: {\n        year: this.today.getFullYear(),\n        month: this.today.getMonth() + 1,\n        day: this.today.getDate() - 1\n      }\n    };\n    this.objResetPasswordViewModel = new ResetPasswordForUserViewModel();\n    this.claimuser = [];\n    this.accountuse = [];\n    this.claimservice.claimassigneenotifications.subscribe(res => {\n      this.countclaimnotifications = res;\n    });\n    this.claimservice.accountassigneenotifications.subscribe(res => {\n      this.countaccountnotifications = res;\n    });\n  }\n  ngOnInit() {\n    this.IsButtonDisable();\n    // $('#setups').on('shown.bs.collapse', function () {\n    //   $(\".servicedrop\").addClass('fa fa-minus').removeClass('fa fa-plus');\n    // });\n    // $('#setups').on('hidden.bs.collapse', function () {\n    //   $(\".servicedrop\").addClass('fa fa-plus').removeClass('fa fa-minus');\n    // });\n    this.InitializeForm();\n    this.initForm();\n    this.GetLoginAlert();\n    debugger;\n    this.PasswordResetForm.reset();\n    this.loggedInUser = this.gvService.currentUser;\n    this.objResetPasswordViewModel.UserName = this.loggedInUser.unique_name;\n    // this.GetUsers();\n    this.claimservice.GetUsersClaimNotifications(this.gvService.currentUser.selectedPractice.PracticeCode, true);\n    this.claimservice.GetUsersAccountNotifications(this.gvService.currentUser.selectedPractice.PracticeCode, true);\n    // Set up options for date pickers\n    this.setupDatePickers();\n  }\n  //alert enhancement\n  initForm() {\n    this.LoginAlertModelForm = new FormGroup({\n      Type: new FormControl('N', [Validators.required]),\n      EffectiveFrom: new FormControl(this.getTodayDate(), [Validators.required]),\n      Priority: new FormControl('', [Validators.required]),\n      EffectiveTo: new FormControl(''),\n      ApplicableFor: new FormControl('A', [Validators.required]),\n      AlertMessage: new FormControl('', [Validators.required]),\n      Inactive: new FormControl('')\n    });\n  }\n  get f() {\n    return this.LoginAlertModelForm.controls;\n  }\n  setDate(date) {\n    if (!Common.isNullOrEmpty(date)) {\n      let dDate = new Date(date);\n      this.selDateDD = {\n        year: dDate.getFullYear(),\n        month: dDate.getMonth() + 1,\n        day: dDate.getDate()\n      };\n    }\n  }\n  setDate1(date) {\n    if (!Common.isNullOrEmpty(date)) {\n      let dDate = new Date(date);\n      this.selDateET = {\n        year: dDate.getFullYear(),\n        month: dDate.getMonth() + 1,\n        day: dDate.getDate()\n      };\n    }\n  }\n  // Helper function to get today's date in the correct format for the date picker\n  getTodayDate() {\n    const today = new Date();\n    return {\n      date: {\n        year: today.getFullYear(),\n        month: today.getMonth() + 1,\n        day: today.getDate()\n      },\n      jsdate: today,\n      formatted: this.formatDate(today),\n      epoc: 0\n    };\n  }\n  formatDate(date) {\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    return `${month}/${day}/${year}`;\n  }\n  //\n  ngAfterViewInit() {\n    if (this.setups.nativeElement.children.length > 0) this.isSetup = true;\n    this.isSetup = false;\n  }\n  onClickUnderDevModule() {\n    return swal('Coming Soon', 'Selected module is under development.', 'info');\n  }\n  InitializeForm() {\n    this.PasswordResetForm = new FormGroup({\n      pGroup: new FormGroup({\n        userName: new FormControl('', [Validators.required]),\n        OldPassword: new FormControl('', [Validators.required, Validators.maxLength(100), Validators.minLength(8), Validators.pattern(strongRegex)]),\n        password: new FormControl('', [Validators.required, Validators.maxLength(100), Validators.minLength(8), Validators.pattern(strongRegex)]),\n        confirmPassword: new FormControl('', [Validators.required, Validators.maxLength(100), Validators.minLength(8)])\n      }, {\n        validators: MatchPassword\n      })\n    });\n  }\n  show() {\n    this.PasswordResetForm.reset();\n    // $('#passwordResetModal').modal('show');\n  }\n\n  hide() {\n    // $('#passwordResetModal').modal('hide');\n  }\n  onClickLogout() {\n    this.authService.Logout();\n  }\n  onClickChangePassword() {\n    this.PasswordResetForm.reset();\n    this.objResetPasswordViewModel.UserName = this.loggedInUser.unique_name;\n    this.PasswordResetForm.get('pGroup.userName').setValue(this.loggedInUser.unique_name);\n    $('#passwordResetfORUserModal').modal('toggle');\n  }\n  onClickAlert() {\n    // this.modalService.open(this.alertModal, { centered: true });\n    this.alertModal.show();\n    this.isModalActive = true; // Show the modal\n  }\n\n  showAlert() {\n    debugger;\n    //set the modal body static.will close on click OK or Cross\n    const modalOptions = {\n      backdrop: 'static'\n    };\n    this.alertModal.config = modalOptions;\n    this.alertModal.show();\n    this.GetLoginAlert();\n  }\n  onclose() {\n    this.f.AlertMessage.setValue('');\n    this.f.Priority.setValue('');\n    this.f.EffectiveTo.setValue('');\n    this.alertModal.hide();\n  }\n  onStartDateChangeStart(event) {\n    this.loginalertmodel.EffectiveFrom = event.formatted;\n    if (this.loginalertmodel.EffectiveTo < event.formatted) {\n      this.LoginAlertModelForm.patchValue({\n        'EffectiveTo': null\n      });\n    }\n    this.disableUntil();\n  }\n  disableUntil() {\n    debugger;\n    let d = new Date(this.loginalertmodel.EffectiveFrom);\n    d.setDate(d.getDate() - 1);\n    let copy = this.getCopyOfOptions();\n    copy.disableUntil = {\n      year: d.getFullYear(),\n      month: d.getMonth() + 1,\n      day: d.getDate()\n    };\n    this.myDatePickerOptions = copy;\n  }\n  getCopyOfOptions() {\n    return JSON.parse(JSON.stringify(this.myDatePickerOptions));\n  }\n  setupDatePickers() {\n    const today = new Date();\n    this.myDateRangePickerOptions = {\n      dateFormat: 'mm/dd/yyyy',\n      height: '25px',\n      width: '100%',\n      disableUntil: {\n        year: today.getFullYear(),\n        month: today.getMonth() + 1,\n        day: today.getDate() - 1\n      }\n    };\n    this.myDatePickerOptions = {\n      height: '25px',\n      width: '100%',\n      disableUntil: {\n        year: today.getFullYear(),\n        month: today.getMonth() + 1,\n        day: today.getDate() - 1\n      },\n      editableDateField: false // Disable manual input\n    };\n  }\n\n  onDateInputKeydown(event) {\n    if (event.key !== 'Tab') {\n      event.preventDefault(); // Prevent any keyboard input except Tab\n    }\n  }\n\n  onDueDateChangeStart(event) {\n    this.loginalertmodel.EffectiveTo = event.formatted;\n  }\n  onSaveClick() {\n    if (this.PasswordResetForm.valid) {\n      this.objResetPasswordViewModel.UserId = this.loggedInUser.userId;\n      this.apiService.PostData('/UserManagementSetup/ResetPasswordByUser', this.objResetPasswordViewModel, response => {\n        if (response.Status === 'Success') {\n          this.hide();\n          this.toaster.success('Password has been reset successfully.', 'Reset Password');\n        } else {\n          this.toaster.error(response.Status, 'Error');\n        }\n      });\n    } else {\n      this.toaster.warning('Enter password details.', 'Validation');\n      return;\n    }\n  }\n  Hide(moduleName) {\n    if (this.loggedInUser.Menu.findIndex(t => t.toLowerCase().trim() === moduleName.toLowerCase().trim()) > -1) {\n      if (this.setups.nativeElement.children.length > 0) {\n        this.isSetup = true;\n      } else {\n        this.isSetup = false;\n      }\n      return false;\n    }\n    if (this.setups.nativeElement.children.length > 0) {\n      this.isSetup = true;\n    } else {\n      this.isSetup = false;\n    }\n    return true;\n  }\n  ComingSoon() {\n    swal('Coming Soon', 'Selected module in under development', 'info');\n  }\n  isReportingPerson() {\n    return this.gvService.isReportingPerson();\n  }\n  IsButtonDisable() {\n    debugger;\n    this.isDisabled = this.gvService.IsbuttonDisable();\n  }\n  //alert enchancement\n  isNullOrEmptyString(str) {\n    if (str == undefined || str == null || $.trim(str) == '') return true;else return false;\n  }\n  // Recursive function to mark all controls in the form group as dirty\n  markFormGroupAsDirty(formGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      if (control instanceof FormControl) {\n        control.markAsDirty();\n      } else if (control instanceof FormGroup) {\n        this.markFormGroupAsDirty(control);\n      }\n    });\n  }\n  canSave() {\n    debugger;\n    const formData = this.LoginAlertModelForm.value;\n    // Validate Effective From\n    const effectiveFromDate = formData.EffectiveFrom;\n    if (!effectiveFromDate || effectiveFromDate === '') {\n      this.toaster.warning('Please select Effective From date.', 'Validation');\n      return false;\n    }\n    if (this.isNullOrEmptyString(formData.Type)) {\n      this.toaster.warning('Please select Type.', 'Validation');\n      return false;\n    }\n    debugger;\n    if (this.isNullOrEmptyString(formData.Priority)) {\n      this.toaster.warning('Please select Priority.', 'Validation');\n      return false;\n    }\n    if (this.isNullOrEmptyString(formData.ApplicableFor)) {\n      this.toaster.warning('Please select ApplicableFor.', 'Validation');\n      return false;\n    }\n    if (this.isNullOrEmptyString(formData.AlertMessage)) {\n      this.toaster.warning('Please provide Notes.', 'Validation');\n      return false;\n    }\n  }\n  saveLoginAlert() {\n    debugger;\n    //let checkboxRes = this.onSubmit();\n    if (this.canSave() !== false && this.LoginAlertModelForm.valid) {\n      const formData = this.LoginAlertModelForm.value;\n      //var alertID1 = this.alertmodel[0].AlertID;\n      //console.log('alertID1',alertID1);\n      var alertID = this.loginalertmodel && this.loginalertmodel[0] ? this.loginalertmodel[0].AlertID : null;\n      console.log('alertID ', alertID);\n      if (alertID == null && this.loginalertmodel.AlertID == null || alertID == undefined && this.loginalertmodel.AlertID == undefined || alertID == 0 && this.loginalertmodel.AlertID == 0) {\n        // Create a new alert\n        this.loginalertmodel = {\n          // Create a new object for the new alert\n          Type: formData.Type,\n          AlertID: 0,\n          EffectiveFrom: formData.EffectiveFrom ? formData.EffectiveFrom.formatted : null,\n          Priority: formData.Priority,\n          EffectiveTo: formData.EffectiveTo ? formData.EffectiveTo.formatted : null,\n          ApplicableFor: formData.ApplicableFor,\n          AlertMessage: formData.AlertMessage,\n          Login: formData.Login,\n          Inactive: formData.Inactive\n        };\n        // Call the API service to save the data\n        this.apiService.PostData('/Alert/SaveLoginAlert', this.loginalertmodel, response => {\n          console.log('API Response:', response);\n          if (response.Status === 'Success') {\n            swal('Alert', 'Alert Has Been Assigned Successfully', 'success');\n            this.closebutton.nativeElement.click(); // Close the modal\n            this.initForm();\n            this.GetLoginAlert();\n          } else {\n            swal('Failed', response.Status, 'error');\n          }\n        });\n      } else {\n        // Update an existing alert\n        const updatedAlertModel = {\n          AlertID: alertID,\n          Type: formData.Type,\n          Priority: formData.Priority,\n          EffectiveFrom: formData.EffectiveFrom ? formData.EffectiveFrom.formatted : null,\n          EffectiveTo: formData.EffectiveTo ? formData.EffectiveTo.formatted : null,\n          ApplicableFor: formData.ApplicableFor,\n          AlertMessage: formData.AlertMessage,\n          Login: formData.Login,\n          Inactive: formData.Inactive\n        };\n        // Call the API service to update the existing alert\n        this.apiService.PostData('/Alert/SaveLoginAlert', updatedAlertModel, response => {\n          debugger;\n          if (response.Status === 'Success') {\n            swal('Alert', 'Alert Has Been Updated Successfully', 'success').then(() => {\n              location.reload();\n            });\n            this.closebutton.nativeElement.click(); // Close the modal\n            this.initForm();\n            this.GetLoginAlert();\n          } else {\n            swal('Failed', response.Status, 'error');\n          }\n          console.log('API Response:', response);\n        });\n        console.log('formData:', formData);\n        console.log('this.alertmodel:', this.loginalertmodel);\n        this.markFormGroupAsDirty(this.LoginAlertModelForm);\n      }\n    } else {\n      // this.toaster.error('Form is not valid. Please fill all required fields.');\n    }\n  }\n  GetLoginAlert() {\n    debugger;\n    this.apiService.getData('/Alert/GetLoginAlert').subscribe(data => {\n      debugger;\n      if (data.Status == 'Success') {\n        this.loginalertmodel = data.Response;\n        this.isCreateMode = !this.loginalertmodel || !this.loginalertmodel[0] || !this.loginalertmodel[0].AlertID;\n        console.log(\"GET Alert data : \", this.loginalertmodel);\n        console.log('Alert Model Priority:', this.loginalertmodel[0].Priority);\n        console.log('');\n        this.f.Inactive.setValue(this.loginalertmodel[0].Inactive);\n        this.f.Type.setValue(this.loginalertmodel[0].Type);\n        this.f.EffectiveFrom.setValue(this.setDate(this.loginalertmodel[0].EffectiveFrom));\n        this.f.Priority.setValue(this.loginalertmodel[0].Priority);\n        this.f.EffectiveTo.setValue(this.setDate1(this.loginalertmodel[0].EffectiveTo));\n        this.f.ApplicableFor.setValue(this.loginalertmodel[0].ApplicableFor);\n        this.f.AlertMessage.setValue(this.loginalertmodel[0].AlertMessage);\n        this.alertDataEvent.emit(this.loginalertmodel);\n        //             // Function to check if the alert is expired\n        // Get the current date\n        const currentDate = new Date();\n        currentDate.setHours(0, 0, 0, 0);\n        // Convert effectiveToDate string to a Date object\n        const effectiveToDate = new Date(this.loginalertmodel[0].EffectiveTo);\n        effectiveToDate.setHours(0, 0, 0, 0);\n        // Check if the Effective To date is before the current date\n        if (this.loginalertmodel[0].EffectiveTo == null) {\n          this.isExpired = false;\n          console.log('this.isExpired ', this.isExpired);\n        } else if (effectiveToDate < currentDate) {\n          this.isExpired = effectiveToDate < currentDate;\n          console.log('this.isExpired ', this.isExpired);\n        }\n      } else {\n        // this.toaster.error(data.Status, 'Error');\n      }\n    });\n  }\n  alertRole() {\n    var result = this.gvService.alertRole();\n    return result;\n  }\n};\n__decorate([ViewChild('setups'), __metadata(\"design:type\", ElementRef)], NavbarComponent.prototype, \"setups\", void 0);\n__decorate([ViewChild(ModalDirective), __metadata(\"design:type\", typeof (_c = typeof ModalDirective !== \"undefined\" && ModalDirective) === \"function\" ? _c : Object)], NavbarComponent.prototype, \"alertModal\", void 0);\n__decorate([ViewChild('closebutton'), __metadata(\"design:type\", Object)], NavbarComponent.prototype, \"closebutton\", void 0);\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], NavbarComponent.prototype, \"alertDataEvent\", void 0);\nNavbarComponent = __decorate([Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n}), __metadata(\"design:paramtypes\", [AuthService, APIService, GvarsService, ChangeDetectorRef, typeof (_a = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _a : Object, typeof (_b = typeof NgbModal !== \"undefined\" && NgbModal) === \"function\" ? _b : Object, ClaimService])], NavbarComponent);\nexport { NavbarComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}