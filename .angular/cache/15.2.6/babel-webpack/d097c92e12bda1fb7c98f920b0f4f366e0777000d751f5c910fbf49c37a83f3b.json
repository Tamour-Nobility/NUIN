{"ast":null,"code":"var _a, _b, _c, _d, _e;\nimport { __decorate, __metadata } from \"tslib\";\nimport { ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DatePipe, DecimalPipe, formatDate } from '@angular/common';\nimport { ToastrService } from 'ngx-toastr';\nimport * as moment from 'moment';\nimport { Common } from '../services/common/common';\nimport { APIService } from '../components/services/api.service';\nimport { GvarsService } from '../services/G_vars/gvars.service';\nimport { DashboardRefreshService } from '../services/data/dashboard.service';\nimport { ClaimService } from '../services/claim/claim.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxSpinnerService } from 'ngx-spinner';\nlet DashBoardComponent = class DashBoardComponent {\n  constructor(route, router, cdr, toastService, API, _decimalPipe, gv, dashboardRefresh, claimservice, spinner, datePipe, modalService) {\n    this.route = route;\n    this.router = router;\n    this.cdr = cdr;\n    this.toastService = toastService;\n    this.API = API;\n    this._decimalPipe = _decimalPipe;\n    this.gv = gv;\n    this.dashboardRefresh = dashboardRefresh;\n    this.claimservice = claimservice;\n    this.spinner = spinner;\n    this.datePipe = datePipe;\n    this.modalService = modalService;\n    this.pcRatio = [];\n    // fromDate: string = '';\n    // toDate: string = '';\n    this.isCustomDateRange = false;\n    // Other properties for charts and data\n    this.viewMode = 'chart';\n    this.viewModePC = 'PCtable';\n    this.viewModePA = 'chart';\n    this.viewModeCPA = 'chart';\n    this.viewModeChargesAndPaymentsTrend = 'chart';\n    this.ClaimsSubmitted = '';\n    this.PendingClaims = '';\n    this.TotalVisits = '';\n    this.PostedERA = '';\n    this.StatementCount = '';\n    this.PatientCount = '';\n    this.UnpostedERAs = '';\n    this.chartData = [{\n      data: [],\n      label: 'Charges',\n      fill: false,\n      lineTension: 0\n    }, {\n      data: [],\n      label: 'Payments',\n      fill: false,\n      lineTension: 0\n    }];\n    this.chartDataPC = [];\n    this.chartLabels = [];\n    this.chartLabelsPC = [];\n    this.chartOptions = {\n      plugins: {\n        datalabels: {\n          display: false // Disable the datalabels plugin\n        }\n      },\n\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false // Hide the vertical grid lines\n          }\n        }],\n\n        yAxes: [{\n          gridLines: {\n            display: true,\n            drawBorder: false,\n            color: 'rgba(0, 0, 0, 0.1)',\n            zeroLineColor: 'rgba(0, 0, 0, 0.1)',\n            borderDash: []\n          }\n        }]\n      },\n      responsive: true,\n      maintainAspectRatio: false,\n      legend: {\n        position: 'bottom'\n      }\n    };\n    this.chartColors = [{\n      backgroundColor: 'rgba(0,123,255,0.3)',\n      borderColor: 'rgba(0,123,255,1)'\n    }, {\n      backgroundColor: '#EC7B2D',\n      borderColor: '#EC7B2D'\n    }];\n    this.barchartColors = [{\n      backgroundColor: '#5C9EDA',\n      borderColor: '#5C9EDA'\n    }\n    // { backgroundColor: 'rgba(255,193,7,0.3)', borderColor: 'rgba(255,193,7,1)' }\n    ];\n\n    this.cardData = [{\n      title: 'Claims Submitted',\n      value: this.ClaimsSubmitted\n    }, {\n      title: 'Pending Claims',\n      value: this.PendingClaims\n    }, {\n      title: 'Total Visits',\n      value: this.TotalVisits\n    }, {\n      title: 'Posted ERA',\n      value: this.PostedERA\n    }, {\n      title: 'Unposted ERAs',\n      value: this.UnpostedERAs\n    }, {\n      title: 'Patient Count',\n      value: this.PatientCount\n    }, {\n      title: 'Statement Count',\n      value: this.StatementCount\n    }];\n    this.tableData = [];\n    this.tableDataInsuarance = [];\n    this.tableDataPA = [];\n    this.tableDataPC = [];\n    //#region Chart 1\n    // public barChartOptions: ChartOptions = {\n    //   responsive: true,\n    //   scales: {\n    //     xAxes: [{\n    //       gridLines: {\n    //         display: true,\n    //         drawBorder: false, \n    //         color: 'rgba(0, 0, 0, 0.1)',\n    //         zeroLineColor: 'rgba(0, 0, 0, 0.1)', \n    //         borderDash: [], \n    //       }\n    //     }],\n    //     yAxes: [{\n    //       gridLines: {\n    //         display: false,\n    //       }\n    //     }]\n    //   },\n    //   legend: {\n    //     display: false\n    //   },\n    //   plugins: {\n    //     datalabels: {\n    //       display: true,\n    //       align: 'center',\n    //       anchor: 'center',\n    //      //  offset: 500,\n    //       // formatter: (value, context) => {\n    //       //   if (value !== null && value !== undefined) {\n    //       //     return '                                                   $ ' + value.toFixed(2);\n    //       //   }\n    //       //   return ''; // or any default string you prefer\n    //       // }\n    //       formatter: (value, context) => {\n    //         if (context.dataIndex === 0) { // \"Payments\" data label\n    //           return '                                                         $ ' + value.toFixed(2);\n    //         } else if (context.dataIndex === 1) { // \"Charges\" data label\n    //           return '                                                                      $ ' + value.toFixed(2);\n    //         } else if (context.dataIndex === 2) { // \"Adjustments\" data label \n    //           return '                                                    $ ' + value.toFixed(2);\n    //         }\n    //         return ''; // or any default string you prefer\n    //       },\n    //       // offset: (context) => {\n    //       //   if (context.dataIndex === 1) { // \"Payments\" data label\n    //       //     return -60; // Adjust the offset value as needed\n    //       //   } else {\n    //       //     return -40; // Adjust the offset value as needed for other data labels\n    //       //   }\n    //       // }\n    //     }\n    //   },\n    // };\n    this.barChartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: true,\n            drawBorder: false,\n            color: 'rgba(0, 0, 0, 0.1)',\n            zeroLineColor: 'rgba(0, 0, 0, 0.1)',\n            borderDash: []\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: false\n          }\n        }]\n      },\n      legend: {\n        display: false\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          align: 'center',\n          anchor: 'start',\n          formatter: (value, context) => {\n            let label = '';\n            if (context.dataIndex === 0) {\n              // \"Payments\" data label\n              label = '                      $ ' + value.toFixed(2);\n            } else if (context.dataIndex === 1) {\n              // \"Charges\" data label\n              label = '                      $ ' + value.toFixed(2);\n            } else if (context.dataIndex === 2) {\n              // \"Adjustments\" data label\n              label = '                      $ ' + value.toFixed(2);\n            }\n            return label;\n          },\n          clamp: true,\n          font: {\n            size: 12\n          },\n          // color: '#000', // Optional: set font color\n          textAlign: 'center' // Optional: align text within the label\n          // Adjust other options as needed to fit your design\n        }\n      }\n    };\n    //for guage chart\n    this.gaugeChartData = [75]; // Data for the gauge chart\n    this.gaugeChartLabels = ['Progress']; // Label for the gauge chart\n    this.gaugeChartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      circumference: Math.PI,\n      rotation: -Math.PI,\n      cutoutPercentage: 85,\n      tooltips: {\n        enabled: false\n      }\n    };\n    //\n    // pie chart for insurance aging\n    this.doughnutChartData = [10, 20, 30, 44, 66];\n    this.doughnutChartLabels = ['0-30', '31-60', '61-90', '91-120', '120+'];\n    this.doughnutChartType = 'pie';\n    this.pieChartColors = [{\n      backgroundColor: ['#5C9EDA', '#ed7d31', '#a5a5a5', '#ffc000', '#4472c4']\n    }];\n    this.doughnutChartPercentages = [];\n    this.doughnutChartOptions = {\n      responsive: true,\n      maintainAspectRatio: true,\n      plugins: {\n        datalabels: {\n          color: 'black',\n          display: false\n          // font: {\n          //   weight: 'bold' \n          // }\n        }\n      },\n\n      legend: {\n        position: 'bottom',\n        labels: {\n          boxWidth: 10\n        }\n      },\n      tooltips: {\n        callbacks: {\n          label: (tooltipItem, data) => {\n            const index = tooltipItem.index;\n            const label = data.labels[index] || '';\n            const value = data.datasets[0].data[index] !== null && data.datasets[0].data[index] !== undefined ? data.datasets[0].data[index] : 0;\n            const percentage = this.doughnutChartPercentages[index] !== null && this.doughnutChartPercentages[index] !== undefined ? this.doughnutChartPercentages[index].toFixed(2) : '0';\n            return `${label}: ${value} (${percentage === '0' ? '0%' : percentage + '%'})`;\n          }\n        }\n      }\n    };\n    // pie chart for patient aging.\n    // doughnutChartDataPA: number[] = [10, 20, 30,44,66];\n    // doughnutChartLabelsPA: string[] = ['0-30', '31-60', '61-90','91-120','120+'];\n    // doughnutChartTypePA: ChartType = 'pie';\n    // doughnutChartOptionsPA: ChartOptions = {\n    //   responsive: true,\n    //   maintainAspectRatio: true,\n    //   plugins: {\n    //     datalabels: {\n    //       color: 'black', \n    //       // font: {\n    //       //   weight: 'bold' \n    //       // }\n    //     }\n    //   },\n    //   legend: {\n    //     position: 'bottom',\n    //     labels: {\n    //       boxWidth: 10,\n    //     }\n    //   },\n    // };\n    this.doughnutChartDataPA = [10, 20, 30, 44, 66];\n    this.doughnutChartLabelsPA = ['0-30', '31-60', '61-90', '91-120', '120+'];\n    this.doughnutChartTypePA = 'pie';\n    this.doughnutChartPercentagesPA = [];\n    this.doughnutChartOptionsPA = {\n      responsive: true,\n      maintainAspectRatio: true,\n      plugins: {\n        datalabels: {\n          display: false,\n          color: 'black'\n          // font: {\n          //   weight: 'bold' \n          // }\n        }\n      },\n\n      legend: {\n        position: 'bottom',\n        labels: {\n          boxWidth: 10\n        }\n      },\n      tooltips: {\n        callbacks: {\n          label: (tooltipItem, data) => {\n            const index = tooltipItem.index;\n            const label = data.labels[index] || '';\n            const value = data.datasets[0].data[index] !== null && data.datasets[0].data[index] !== undefined ? data.datasets[0].data[index] : 0;\n            const percentage = this.doughnutChartPercentagesPA[index] !== null && this.doughnutChartPercentagesPA[index] !== undefined ? this.doughnutChartPercentagesPA[index].toFixed(2) : '0';\n            return `${label}: ${value} (${percentage === '0' ? '0%' : percentage + '%'})`;\n          }\n        }\n      }\n    };\n    this.barChartType = 'bar';\n    this.barChartLegend = true;\n    this.barChartLabels = [];\n    this.barChartData = [{\n      data: [],\n      label: 'Insurance'\n    }, {\n      data: [],\n      label: 'Patient'\n    }];\n    //#endregion\n    //#region Chart 2\n    this.barChartOptions2 = {\n      responsive: true,\n      scales: {\n        xAxes: [{}],\n        yAxes: [{}]\n      },\n      plugins: {\n        datalabels: {\n          anchor: 'end',\n          align: 'end'\n        }\n      }\n    };\n    this.barChartType2 = 'bar';\n    this.barChartLegend2 = true;\n    this.barChartLabels2 = [];\n    this.barChartData2 = [];\n    //#endregion\n    //#region Chart 3\n    this.lineChartData = [];\n    this.lineChartLegend = true;\n    this.lineChartLabels = [];\n    this.lineChartType = 'line';\n    this.lineChartOptions = {\n      responsive: true\n    };\n    this.lineChartColors = [{\n      backgroundColor: 'rgba(148,159,177,0.2)',\n      borderColor: 'rgb(66, 132, 244,1)',\n      pointBackgroundColor: 'rgba(148,159,177,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n    }, {\n      backgroundColor: 'rgba(77,83,96,0.2)',\n      borderColor: 'rgb(244, 67, 54)',\n      pointBackgroundColor: 'rgba(77,83,96,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(77,83,96,1)'\n    }];\n    this.doughnutChartLabelsPC = ['PC Ratio', 'Remaining'];\n    this.doughnutChartDataPC = [0, 100];\n    this.chartOptionsPC = {\n      rotation: 1 * Math.PI,\n      circumference: 1 * Math.PI,\n      cutoutPercentage: 80,\n      responsive: true,\n      title: {\n        display: false,\n        text: 'PC Ratio'\n      },\n      tooltips: {\n        enabled: false\n      },\n      legend: {\n        display: false\n      },\n      plugins: {\n        datalabels: {\n          display: false\n        }\n      }\n    };\n    this.chartColorsPC = [{\n      backgroundColor: ['green', 'lightgray'],\n      borderWidth: 0\n    }];\n    this.claimservice.GetUsersClaimNotifications(this.gv.currentUser.selectedPractice.PracticeCode, false);\n    this.claimservice.GetUsersAccountNotifications(this.gv.currentUser.selectedPractice.PracticeCode, false);\n    this.data = [];\n    this.selectDateRange('MTD');\n  }\n  ngOnInit() {\n    this.disableFutureDate();\n    this.practiceSubscription = this.gv.practiceChanged.subscribe(practice => {\n      // React to practice change here, e.g., refresh data\n      this.refreshData();\n    });\n    // this.selectDateRange('MTD');\n    this.showChartPC();\n    //  //by HAMZA to get external practices..............\n    //Dynamic external practices checking commented for now.\n    //     this.API.getDataWithoutSpinner(`/Dashboard/GetExternalPractices`).subscribe(data => {\n    //       this.gv.external_practices = data.Response;\n    //     })\n    // this.getDashboardData();\n    // const fromDate = new Date('1/13/2023');\n    //const toDate = new Date('9/13/2023');\n    // this.getDashboardData(this.fromDate, this.toDate);\n    // this.dashboardRefresh.refresh.subscribe((r) => {\n    //   debugger\n    //   // this.getDashboardData();\n    //   this.getDashboardData(this.fromDate, this.toDate);\n    //   this.selectDateRange('MTD');\n    // })\n    //this.selectDateRange('MTD');\n  }\n\n  ngOnDestroy() {\n    if (this.practiceSubscription) {\n      this.practiceSubscription.unsubscribe();\n    }\n  }\n  refreshData() {\n    //  this.getDashboardData();\n    this.selectDateRange('MTD');\n  }\n  refreshAfterPraqctice() {\n    this.dashboardRefresh.refresh.subscribe(r => {\n      // this.getDashboardData();\n      this.getDashboardData(this.fromDate, this.toDate);\n      this.selectDateRange('MTD');\n    });\n  }\n  ngAfterViewInit() {\n    this.chartButton.nativeElement.click();\n  }\n  getTitleColor(title) {\n    switch (title) {\n      case 'Statement Count':\n        return 'blue';\n      case 'Patient Count':\n        return 'green';\n      case 'Unposted ERAs':\n        return 'red';\n      case 'Total Visits':\n        return 'red';\n      case 'Pending Claims':\n        return 'red';\n      case 'ClaimsSubmitted':\n        return 'red';\n      default:\n        return 'Posted ERA';\n    }\n  }\n  selectDateRange(range) {\n    this.spinner.show();\n    this.selectedRange = range;\n    this.isCustomDateRange = range === 'Custom';\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    let fromDate, toDate;\n    switch (range) {\n      case 'MTD':\n        fromDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        toDate = today;\n        this.resetDateRange();\n        break;\n      case 'YTD':\n        fromDate = new Date(today.getFullYear(), 0, 1);\n        toDate = today;\n        this.resetDateRange();\n        break;\n      case 'LastMonth':\n        fromDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n        toDate = new Date(today.getFullYear(), today.getMonth(), 0);\n        this.resetDateRange();\n        break;\n      case 'Custom':\n        if (this.fromDate != null && this.toDate != null) {\n          //fromDate = new Date(this.fromDate);\n          //toDate = new Date(this.toDate);\n          const _fromDate = Common.isNullOrEmpty(this.fromDate) ? null : moment(this.fromDate);\n          const _toDate = Common.isNullOrEmpty(this.toDate) ? null : moment(this.toDate);\n          fromDate = _fromDate.toDate();\n          toDate = _toDate.toDate();\n          if (!this.validateDateRange(fromDate, toDate)) {\n            swal('Failed', \"The selected date range should not exceed 12 months.\", 'error');\n            this.resetDateRange();\n            this.spinner.hide();\n            return;\n          }\n        } else {\n          this.spinner.hide();\n          return;\n        }\n        break;\n      default:\n        this.spinner.hide();\n        return;\n    }\n    this.getDashboardData(fromDate, toDate);\n  }\n  disableFutureDate() {\n    const todayDate = new Date();\n    const yyyy = todayDate.getFullYear();\n    const mm = String(todayDate.getMonth() + 1).padStart(2, '0');\n    const dd = String(todayDate.getDate()).padStart(2, '0');\n    this.today = `${yyyy}-${mm}-${dd}`;\n  }\n  onDateChange(event) {\n    const input = event.target;\n    const dateValue = new Date(input.value);\n    if (dateValue.getFullYear() > 1900) {\n      this.updateDateRange();\n      // Valid year, proceed with your logic\n    }\n  }\n\n  updateDateRange() {\n    if (this.isCustomDateRange && this.fromDate && this.toDate) {\n      // const fromDate = new Date(this.fromDate);\n      // const toDate = new Date(this.toDate);\n      const fromDate = Common.isNullOrEmpty(this.fromDate) ? null : moment(this.fromDate);\n      const toDate = Common.isNullOrEmpty(this.toDate) ? null : moment(this.toDate);\n      // Check if from date is greater than to date\n      if (fromDate > toDate) {\n        swal('Failed', 'From date cannot be greater than To date.', 'error');\n        this.resetDateRange();\n        return;\n      }\n      if (this.validateDateRange(fromDate.toDate(), toDate.toDate())) {\n        this.getDashboardData(fromDate.toDate(), toDate.toDate());\n      } else {\n        swal('Failed', \"The selected date range should not exceed 12 months.\", 'error');\n        this.resetDateRange();\n        this.spinner.hide();\n      }\n    }\n  }\n  validateDateRange(fromDate, toDate) {\n    const diffInMonths = (toDate.getFullYear() - fromDate.getFullYear()) * 12 + toDate.getMonth() - fromDate.getMonth();\n    return diffInMonths <= 11;\n  }\n  resetDateRange() {\n    this.fromDate = null;\n    this.toDate = null;\n  }\n  // getDashboardData() {\n  //   this.API.getData(`/Dashboard/GetDashboardData?practiceCode=${this.gv.currentUser.selectedPractice.PracticeCode}`)\n  //   .subscribe(res => {\n  //       if (res.Status === 'success') {\n  //         this.updateChart(res.Response);\n  //         this.data = res.Response;\n  //         console.log(\"my chanegs in dashboard\",this.data);\n  //   //About notifications of claim and account level assignments\n  //   this.claimservice.GetUsersClaimNotifications(this.gv.currentUser.selectedPractice.PracticeCode, false);\n  //   this.claimservice.GetUsersAccountNotifications(this.gv.currentUser.selectedPractice.PracticeCode, false);\n  //       }\n  //       else {\n  //         this.toastService.error(res.Response, 'Error');\n  //       }\n  //     });\n  // }\n  getDashboardData(fromDate, toDate) {\n    const practiceCode = this.gv.currentUser.selectedPractice.PracticeCode;\n    let _fromDate = this.datePipe.transform(fromDate, 'MM-dd-yyyy');\n    let _toDate = this.datePipe.transform(toDate, 'MM-dd-yyyy');\n    this.API.getData(`/Dashboard/GetDashboardData?practiceCode=${practiceCode}&fromDate=${_fromDate}&toDate=${_toDate}&userId=${this.gv.currentUser.userId}`).subscribe(res => {\n      if (res.Status === 'success') {\n        this.updateChart(res.Response);\n        this.updateTableData(res.Response);\n        this.updateTableDataInsurance(res.Response);\n        this.updateTableDataPA(res.Response);\n        this.updateTableDataPC(res.Response);\n        // this.processDashboardData(res.Response);\n        this.data = res.Response;\n        // About notifications of claim and account level assignments\n        this.claimservice.GetUsersClaimNotifications(practiceCode, false);\n        this.claimservice.GetUsersAccountNotifications(practiceCode, false);\n      } else {\n        this.toastService.error(res.Response, 'Error');\n      }\n    });\n  }\n  updateTableDataInsurance(data) {\n    this.tableDataInsuarance = data.insuranceAging.map(item => ({\n      agingSlot: item.AGINGSLOT,\n      insuranceAging: item.INSURANCEAGING !== null ? item.INSURANCEAGING : 0,\n      percentage: item.Percentage !== null ? item.Percentage : 0\n    }));\n  }\n  updateTableDataPA(data) {\n    this.tableDataPA = data.patientAging.map(item => ({\n      agingSlot: item.AGINGSLOT,\n      patientAging: item.PATIENTAGING !== null ? item.PATIENTAGING : 0,\n      percentage: item.PERCENTAGE !== null ? item.PERCENTAGE : 0\n    }));\n  }\n  updateTableData(data) {\n    const {\n      ChargesANDPaymentsTrend\n    } = data;\n    const {\n      PCRatio\n    } = data;\n    if (ChargesANDPaymentsTrend) {\n      const chargesData = ChargesANDPaymentsTrend.find(item => item['Data Type'] === 'Charges');\n      const paymentsData = ChargesANDPaymentsTrend.find(item => item['Data Type'] === 'Payments');\n      // if (chargesData && paymentsData) {\n      //   this.tableData = Object.keys(chargesData).slice(1).map((month) => ({\n      //     month: month !== 'Month_Year' ? month : 'NA',\n      //     charges: chargesData[month] !== undefined && chargesData[month] !== null ? chargesData[month] : 0,\n      //     payments: paymentsData[month] !== undefined && paymentsData[month] !== null ? paymentsData[month] : 0\n      //   }));\n      // }\n      // Generate tableData with missing data handled\n      this.tableData = this.chartLabels.map(month => ({\n        month: month !== 'Month_Year' ? month : 'NA',\n        charges: chargesData && chargesData[month] !== undefined && chargesData[month] !== null ? chargesData[month] : 0,\n        payments: paymentsData && paymentsData[month] !== undefined && paymentsData[month] !== null ? paymentsData[month] : 0\n      }));\n    }\n    // if (PCRatio) {\n    //   const charges = PCRatio.find(item => item['Data Type'] === 'Charges');\n    //   const payments = PCRatio.find(item => item['Data Type'] === 'Payments');\n    //   const pcRatio = PCRatio.find(item => item['Data Type'] === 'PCRatio');\n    //   if (charges && payments && pcRatio) {\n    //     this.tableDataPC = charges.map((chargeData, index) => ({\n    //       charges: chargeData.value !== undefined && chargeData.value !== null ? chargeData.value : 0,\n    //       payments: payments[index].value !== undefined && payments[index].value !== null ? payments[index].value : 0,\n    //       pcRatio: pcRatio[index].value !== undefined && pcRatio[index].value !== null ? pcRatio[index].value : 0\n    //     }));\n    //   }\n    //   console.log('PC Table Data:', this.tableDataPC);\n    // }\n  }\n\n  updateTableDataPC(data) {\n    if (!data || !data.pcRatio || data.pcRatio.length === 0) {\n      // Handle case where data or pcRatio is empty or undefined\n      this.tableDataPC = [{\n        charges: '0',\n        payments: '0',\n        pcRatio: '0 %'\n      }];\n      return;\n    }\n    // Map data only if pcRatio is available\n    // const mappedData = data.pcRatio.map(item => ({\n    //   charges: item.DataType === 'Charges' ? (item.Total!=null? (`$ ${item.Total.toFixed(2)}`):'$0') : '$0',\n    //   payments: item.DataType === 'Payments' ? (item.Total!=null? (`$ ${item.Total.toFixed(2)}`):'$0') : '$0',\n    //   pcRatio:item.PCRatio!=null? (`${item.PCRatio} %`):'0%'\n    // }));\n    const mappedData = data.pcRatio.map(item => ({\n      charges: item.DataType === 'Charges' ? item.Total != null ? `${item.Total.toFixed(2)}` : '0' : '0',\n      payments: item.DataType === 'Payments' ? item.Total != null ? `${item.Total.toFixed(2)}` : '0' : '0',\n      pcRatio: item.PCRatio != null ? `${item.PCRatio} %` : '0%'\n    }));\n    this.tableDataPC = mappedData;\n  }\n  updateChart(data) {\n    // first chart\n    const {\n      agingDashboard,\n      recentAgingSummary,\n      recentChargesPayment,\n      ChargesANDPaymentsTrend,\n      CPAAnalysis,\n      claimsAndERAs,\n      insuranceAging,\n      patientAging,\n      pcRatio\n    } = data;\n    // if (agingDashboard) {\n    //   this.barChartLabels = agingDashboard.map(d => d.AGINGSLOT);\n    //   this.barChartData = [{ data: agingDashboard.map(d => d.INSURANCE), label: 'Insurance' }, { data: agingDashboard.map(d => d.PATIENT), label: 'Patient' }];\n    // }\n    // if (CPAAnalysis) {\n    //   debugger\n    //   this.barChartLabels = CPAAnalysis.map(d => d.Mode);\n    //   this.barChartData = [\n    //     { data: CPAAnalysis.map(d => d.Total_Amount), label: 'Total Amount' }\n    //   ];\n    // }\n    // Add spaces to the labels\n    const formattedLabels = CPAAnalysis.map(d => {\n      if (d.Mode === 'Charges') {\n        return 'Charges      ';\n      } else if (d.Mode === 'Payments') {\n        return 'Payments      ';\n      } else if (d.Mode === 'Adjustments') {\n        return 'Adjustments      ';\n      }\n      return d.Mode;\n    });\n    if (CPAAnalysis && CPAAnalysis.length > 0) {\n      this.barChartLabels = formattedLabels;\n      this.barChartData = [{\n        data: CPAAnalysis.map(d => d.Total_Amount || 0),\n        label: 'Total Amount'\n      }];\n    } else {\n      // Handle case where CPAAnalysis is null or empty\n      this.barChartLabels = [];\n      this.barChartData = [{\n        data: [],\n        label: 'Total Amount'\n      }];\n    }\n    // second chart\n    if (recentAgingSummary) {\n      this.barChartLabels2 = recentAgingSummary.map(r => r.Insurance);\n      var d = [{\n        data: recentAgingSummary.map(c => c.C_0_30__Days_Balance_by_Claim_Date),\n        label: '0-30'\n      }, {\n        data: recentAgingSummary.map(c => c.C_31_60__Days_Balance_by_Claim_Date),\n        label: '31-60'\n      }, {\n        data: recentAgingSummary.map(c => c.C_61_90__Days_Balance_by_Claim_Date),\n        label: '61-90'\n      }, {\n        data: recentAgingSummary.map(c => c.C_91_120__Days_Balance_by_Claim_Date),\n        label: '91-120'\n      }, {\n        data: recentAgingSummary.map(c => c.C_121_150__Days_Balance_by_Claim_Date),\n        label: '121-150'\n      }, {\n        data: recentAgingSummary.map(c => c.C_151_180__Days_Balance_by_Claim_Date),\n        label: '151-180'\n      }, {\n        data: recentAgingSummary.map(c => c.C___180__Days_Balance_by_Claim_Date),\n        label: '180 Plus'\n      }, {\n        data: recentAgingSummary.map(c => c.Total_Balance),\n        label: 'Total'\n      }];\n      this.barChartData2 = d;\n    }\n    // third chart\n    if (recentChargesPayment && recentChargesPayment.length > 0) {\n      this.cpaColumns = Object.keys(recentChargesPayment[0]);\n      this.lineChartLabels = this.cpaColumns.slice(1);\n      if (recentChargesPayment.length === 1) {\n        this.lineChartData = [{\n          data: Object.values(recentChargesPayment[0]).slice(1),\n          label: Object.values(recentChargesPayment[0])[0]\n        }];\n      }\n      if (recentChargesPayment.length > 1) {\n        this.lineChartData = [{\n          data: Object.values(recentChargesPayment[0]).slice(1),\n          label: Object.values(recentChargesPayment[0])[0]\n        }, {\n          data: Object.values(recentChargesPayment[1]).slice(1),\n          label: Object.values(recentChargesPayment[1])[0]\n        }, {\n          data: Object.values(recentChargesPayment[2]).slice(1),\n          label: Object.values(recentChargesPayment[2])[0]\n        }];\n      }\n    }\n    //  to get the cards data\n    if (claimsAndERAs) {\n      this.ClaimsSubmitted = claimsAndERAs.claimsAndERAs.claims_submitted;\n      this.PendingClaims = claimsAndERAs.claimsAndERAs.pending_claims;\n      this.TotalVisits = claimsAndERAs.claimsAndERAs.total_claims;\n      this.PostedERA = claimsAndERAs.claimsAndERAs.total_posted_eras;\n      this.UnpostedERAs = claimsAndERAs.claimsAndERAs.total_unposted_eras;\n      this.PatientCount = claimsAndERAs.claimsAndERAs.total_patient_accounts;\n      this.StatementCount = claimsAndERAs.claimsAndERAs.total_statements_sent;\n    }\n    this.cardData = [{\n      title: 'Claims Submitted',\n      value: claimsAndERAs.claimsAndERAs.claims_submitted\n    }, {\n      title: 'Pending Claims',\n      value: claimsAndERAs.claimsAndERAs.pending_claims\n    }, {\n      title: 'Total Visits',\n      value: claimsAndERAs.claimsAndERAs.total_claims\n    }, {\n      title: 'Posted ERAs',\n      value: claimsAndERAs.claimsAndERAs.total_posted_eras\n    }, {\n      title: 'Statement Count',\n      value: claimsAndERAs.claimsAndERAs.total_statements_sent\n    }, {\n      title: 'Patient Count',\n      value: claimsAndERAs.claimsAndERAs.total_patient_accounts\n    }, {\n      title: 'Unposted ERAs',\n      value: claimsAndERAs.claimsAndERAs.total_unposted_eras\n    }];\n    //for charges & payments trend\n    //if (ChargesANDPaymentsTrend) {\n    //const chargesData = ChargesANDPaymentsTrend.find(item => item['Data Type'] === 'Charges');\n    //const paymentsData = ChargesANDPaymentsTrend.find(item => item['Data Type'] === 'Payments');\n    if (ChargesANDPaymentsTrend) {\n      const chargesData = ChargesANDPaymentsTrend.find(item => item['Data Type'] === 'Charges');\n      const paymentsData = ChargesANDPaymentsTrend.find(item => item['Data Type'] === 'Payments');\n      // if (chargesData && paymentsData) {\n      //this.chartLabels = Object.keys(chargesData).filter(key => key !== 'Data Type');\n      // Determine chart labels from chargesData if available\n      this.chartLabels = chargesData ? Object.keys(chargesData).filter(key => key !== 'Data Type') : [];\n      // Process chargesData and paymentsData to replace null with 0\n      //const chargesValues = Object.values(chargesData).slice(1).map(value => (value !== null && value !== undefined) ? value : 0);\n      //const paymentsValues = Object.values(paymentsData).slice(1).map(value => (value !== null && value !== undefined) ? value : 0);\n      // Process chargesData if available\n      const chargesValues = chargesData ? Object.values(chargesData).slice(1).map(value => value !== null && value !== undefined ? value : 0) : new Array(this.chartLabels.length).fill(0); // Default to 0 if no charges data\n      // Process paymentsData if available\n      const paymentsValues = paymentsData ? Object.values(paymentsData).slice(1).map(value => value !== null && value !== undefined ? value : 0) : new Array(this.chartLabels.length).fill(0); // Default to 0 if no payments data\n      this.chartData = [{\n        data: chargesValues,\n        label: 'Charges',\n        fill: false,\n        lineTension: 0\n      }, {\n        data: paymentsValues,\n        label: 'Payments',\n        fill: false,\n        lineTension: 0\n      }];\n      // }\n    }\n    //}\n    // pie Chart insurance aging \n    if (insuranceAging) {\n      this.doughnutChartLabels = insuranceAging.map(item => item.AGINGSLOT);\n      this.doughnutChartData = insuranceAging.map(item => item.INSURANCEAGING);\n      this.doughnutChartPercentages = insuranceAging.map(item => item.Percentage);\n    } else {\n      this.doughnutChartLabels = ['0-30', '31-60', '61-90', '91-120', '120+'];\n      this.doughnutChartData = [0, 0, 0, 0, 0];\n    } // end pie chart insurance aging\n    // pie chart for patient aging\n    if (patientAging) {\n      this.doughnutChartLabelsPA = patientAging.map(item => item.AGINGSLOT);\n      this.doughnutChartDataPA = patientAging.map(item => item.PATIENTAGING);\n      this.doughnutChartPercentagesPA = patientAging.map(item => item.PERCENTAGE);\n    } else {\n      this.doughnutChartLabelsPA = ['0-30', '31-60', '61-90', '91-120', '120+'];\n      this.doughnutChartDataPA = [0, 0, 0, 0, 0];\n    }\n    // PC Ratio chart\n    if (pcRatio && pcRatio.length > 0) {\n      this.pcRatioValue = pcRatio[0].PCRatio;\n      this.doughnutChartDataPC = [this.pcRatioValue, 100 - this.pcRatioValue];\n      this.PCChartValue = this.pcRatioValue;\n      this.cdr.detectChanges();\n      // this.chartOptions.plugins = {\n      //   centerText: {\n      //     text: this.pcRatioValue.toString(),\n      //     color: 'green',\n      //     fontSize: 24\n      //   }\n      // };\n    }\n  }\n  // Function to format labels with INSURANCEAGING outside and Percentage inside\n  formatLabel(value, percentage) {\n    return `${value} (${percentage}%)`;\n  }\n  // end of pie chart for patient aging\n  //   getAmount(CPAAnalysis: any[], mode: string): number {\n  //     debugger;\n  //     console.log('CPA Analysis:', CPAAnalysis);\n  //     if (!CPAAnalysis || CPAAnalysis.length === 0) {\n  //       console.log('CPA Analysis is undefined or empty.');\n  //       return 0; // or handle as needed\n  //     }\n  //     const item = CPAAnalysis.find(d => d.Mode === mode);\n  //     console.log('Found item for mode:', mode, item);\n  //     return item ? item.Total_Amount : 0;\n  //  }\n  getAmount(CPAAnalysis, mode) {\n    if (!CPAAnalysis || CPAAnalysis.length === 0) {\n      return '0';\n    }\n    const item = CPAAnalysis.find(d => d.Mode === mode);\n    return item && item.Total_Amount != null ? item.Total_Amount.toFixed(2) : '0';\n  }\n  showChart() {\n    this.viewMode = 'chart';\n  }\n  showChartPC() {\n    this.viewModePC = 'PC';\n  }\n  showChartPA() {\n    this.viewModePA = 'chart';\n  }\n  showChartviewModeChargesAndPaymentsTrend() {\n    this.viewModeChargesAndPaymentsTrend = 'chart';\n  }\n  showChartCPA() {\n    this.viewModeCPA = 'chart';\n  }\n  showTable() {\n    this.viewMode = 'table';\n  }\n  showTablePC() {\n    this.viewModePC = 'PCtable';\n  }\n  showTablePA() {\n    this.viewModePA = 'tablePA';\n  }\n  showTableCPA() {\n    this.viewModeCPA = 'CPAtable';\n  }\n  showTableChargesAndPaymentsTrend() {\n    this.viewModeChargesAndPaymentsTrend = 'ChargesAndPaymentsTrendtable';\n  }\n  openFullscreen(template) {\n    this.modalRef = this.modalService.show(template);\n  }\n  // openFullscreen(template: TemplateRef<any>): void {\n  //   this.modalRef = this.modalService.show(template, { class: 'modal-lg' });\n  // }\n  getObjectValues(obj) {\n    var values = Object.values(obj);\n    return values.map((v, i) => i === 0 ? v : '$' + this._decimalPipe.transform(v || 0, '2.1-2'));\n  }\n  onClickAgingAnalysisRow() {\n    this.router.navigate(['ReportSetup/AgingSummaryPat'], {\n      queryParams: {\n        PracticeCode: this.gv.currentUser.selectedPractice.PracticeCode\n      }\n    });\n  }\n  onClickCPAsRow() {\n    let fromDate = formatDate(new Date(new Date().getFullYear(), new Date().getMonth() - 5, new Date().getDate()), 'MM/dd/yyyy', 'en');\n    let toDate = formatDate(new Date(), 'MM/dd/yyyy', 'en');\n    this.router.navigate(['ReportSetup/payment-detail'], {\n      queryParams: {\n        PracticeCode: this.gv.currentUser.selectedPractice.PracticeCode,\n        DateFrom: fromDate,\n        DateTo: toDate\n      }\n    });\n  }\n  onClickAgingByInsRow() {\n    this.router.navigate(['ReportSetup/AgingSummary'], {\n      queryParams: {\n        PracticeCode: this.gv.currentUser.selectedPractice.PracticeCode\n      }\n    });\n  }\n};\n__decorate([ViewChild('chartButton'), __metadata(\"design:type\", ElementRef)], DashBoardComponent.prototype, \"chartButton\", void 0);\nDashBoardComponent = __decorate([Component({\n  selector: 'app-dash-board',\n  templateUrl: './dash-board.component.html',\n  styleUrls: ['./dash-board.component.css']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof ActivatedRoute !== \"undefined\" && ActivatedRoute) === \"function\" ? _a : Object, typeof (_b = typeof Router !== \"undefined\" && Router) === \"function\" ? _b : Object, ChangeDetectorRef, typeof (_c = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _c : Object, APIService, DecimalPipe, GvarsService, DashboardRefreshService, ClaimService, typeof (_d = typeof NgxSpinnerService !== \"undefined\" && NgxSpinnerService) === \"function\" ? _d : Object, DatePipe, typeof (_e = typeof BsModalService !== \"undefined\" && BsModalService) === \"function\" ? _e : Object])], DashBoardComponent);\nexport { DashBoardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}