{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let onlyNumbers = /*#__PURE__*/(() => {\n  class onlyNumbers {\n    constructor(el) {\n      this.el = el;\n    }\n    onInputChange(event) {\n      const initalValue = this.el.nativeElement.value;\n      if (this.enablePeriod) this.el.nativeElement.value = initalValue.replace(/[^0-9-.]*/g, '');else this.el.nativeElement.value = initalValue.replace(/[^0-9]*/g, '');\n      if (initalValue !== this.el.nativeElement.value) {\n        event.stopPropagation();\n      }\n    }\n    onKeyDown(event) {\n      let e = event;\n      if (this.onlyNumbers) {\n        if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        e.keyCode == 65 && e.ctrlKey === true ||\n        // Allow: Ctrl+C\n        e.keyCode == 67 && e.ctrlKey === true ||\n        // Allow: Ctrl+X\n        e.keyCode == 88 && e.ctrlKey === true ||\n        //Allow: Cntl+V\n        e.keyCode == 86 && e.ctrlKey === true ||\n        // Allow: home, end, left, right\n        e.keyCode >= 35 && e.keyCode <= 39 || e.keyCode == 13) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105)) {\n          e.preventDefault();\n        }\n      }\n    }\n    ondrop(event) {\n      if (this.onlyNumbers) {\n        let e = event;\n        let dt = e.dataTransfer;\n        let getdata = dt.getData(\"text\");\n        let regex;\n        if (this.enablePeriod) regex = RegExp(\"^[0-9-.]*$\");else regex = RegExp(\"^[0-9]*$\");\n        if (!regex.test(getdata)) {\n          e.preventDefault();\n        }\n      }\n    }\n    onPaste(e) {\n      if (this.onlyNumbers) {\n        const pastedData = e.clipboardData.getData('text');\n        let regex;\n        if (this.enablePeriod) regex = RegExp(\"^[0-9-.]*$\");else regex = RegExp(\"^[0-9]*$\");\n        if (!regex.test(pastedData)) {\n          e.preventDefault();\n        }\n      }\n    }\n  }\n  onlyNumbers.ɵfac = function onlyNumbers_Factory(t) {\n    return new (t || onlyNumbers)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  onlyNumbers.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: onlyNumbers,\n    selectors: [[\"\", \"onlyNumbers\", \"\"]],\n    hostBindings: function onlyNumbers_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function onlyNumbers_input_HostBindingHandler($event) {\n          return ctx.onInputChange($event);\n        })(\"keydown\", function onlyNumbers_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        })(\"drop\", function onlyNumbers_drop_HostBindingHandler($event) {\n          return ctx.ondrop($event);\n        })(\"paste\", function onlyNumbers_paste_HostBindingHandler($event) {\n          return ctx.onPaste($event);\n        });\n      }\n    },\n    inputs: {\n      onlyNumbers: \"onlyNumbers\",\n      enablePeriod: \"enablePeriod\"\n    }\n  });\n  return onlyNumbers;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}