{"ast":null,"code":"import { CurrentUserViewModel } from '../../models/auth/auth';\nimport { GvarsService } from '../../services/G_vars/gvars.service';\nimport { isNullOrUndefined } from 'util';\nimport { AuthService } from '../../services/auth/auth.service';\nimport { DashboardRefreshService } from '../../services/data/dashboard.service';\nimport { PatientRefreshService } from '../../services/data/patient-refresh.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/G_vars/gvars.service\";\nimport * as i2 from \"../../services/auth/auth.service\";\nimport * as i3 from \"../../services/data/dashboard.service\";\nimport * as i4 from \"../../services/data/patient-refresh.service\";\nexport let ChangePracticeComponent = /*#__PURE__*/(() => {\n  class ChangePracticeComponent {\n    constructor(Gvars, authService, dashboardRefresh, patRefresh) {\n      this.Gvars = Gvars;\n      this.authService = authService;\n      this.dashboardRefresh = dashboardRefresh;\n      this.patRefresh = patRefresh;\n      this.isDashboardComponentInitialized = false;\n      this.loggedInUser = new CurrentUserViewModel();\n    }\n    ngOnInit() {\n      debugger;\n      this.loggedInUser = this.Gvars.currentUser;\n      this.PracticeCode = this.loggedInUser.selectedPractice.PracticeCode;\n      this.loggedInUser.Practices = this.loggedInUser.Practices.map(practice => {\n        return Object.assign(Object.assign({}, practice), {\n          PracticeLabel: `${practice.PracticeCode} | ${practice.PracticeName}` // Add new combined property\n        });\n      });\n\n      let SelectedPractice = this.loggedInUser.Practices.find(t => t.PracticeCode == this.PracticeCode);\n      this.authService.setPractice(SelectedPractice);\n    }\n    onChangePractice() {\n      debugger;\n      let selectedPractice = this.loggedInUser.Practices.find(t => t.PracticeCode == this.PracticeCode);\n      if (selectedPractice) {\n        this.Gvars.setSelectedPractice(selectedPractice);\n        this.authService.setPractice(selectedPractice);\n      }\n      let p = this.loggedInUser.Practices.find(t => t.PracticeCode == this.PracticeCode);\n      if (!isNullOrUndefined(p)) {\n        this.Gvars.currentUser.selectedPractice = p;\n        let isDash = false;\n        this.Gvars.currentUser.Menu.includes(\"Dashboard\") ? isDash = true : isDash = false;\n        this.authService.GetAuthorizedRoute(this.Gvars.currentUser.Menu[0]);\n        if (isDash == true) {\n          this.dashboardRefresh.refresh.next();\n        } else {\n          this.patRefresh.refresh.next();\n        }\n        this.authService.setPractice(p);\n        this.authService.setPractice(p);\n        //Added by HAMZA ZULFIQAR as per USER STORY 119: Reporting Dashboard Implementation For All Practices\n        // this.Gvars.external_practice=this.Gvars.external_practices.includes(this.Gvars.currentUser.selectedPractice.PracticeCode)\n      }\n    }\n\n    show() {\n      $('#pracSelection').modal('show');\n    }\n    hide() {\n      $('#pracSelection').modal('hide');\n    }\n  }\n  ChangePracticeComponent.ɵfac = function ChangePracticeComponent_Factory(t) {\n    return new (t || ChangePracticeComponent)(i0.ɵɵdirectiveInject(i1.GvarsService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.DashboardRefreshService), i0.ɵɵdirectiveInject(i4.PatientRefreshService));\n  };\n  ChangePracticeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChangePracticeComponent,\n    selectors: [[\"app-change-practice\"]],\n    decls: 24,\n    vars: 3,\n    consts: [[\"id\", \"pracSelection\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-hidden\", \"true\", 1, \"modal\", \"inmodal\", \"animated\", \"bounce\"], [1, \"modal-dialog\"], [1, \"modal-content\", \"animated\", \"fadeIn\"], [1, \"modal-header\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"close\"], [\"aria-hidden\", \"true\"], [1, \"sr-only\"], [1, \"fa\", \"fa-clinic-medical\", \"modal-icon\"], [1, \"modal-title\"], [1, \"modal-body\"], [1, \"row\"], [1, \"form-group\", \"col-lg-6\", \"col-lg-offset-3\"], [\"optionValueField\", \"PracticeCode\", \"optionTextField\", \"PracticeLabel\", 3, \"ngModel\", \"items\", \"allowClear\", \"ngModelChange\"], [1, \"modal-footer\"], [1, \"col-md-12\", \"text-center\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn\", \"btn-w-m\", \"btn-primary\", \"btn-md\", 3, \"click\"]],\n    template: function ChangePracticeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"button\", 4)(5, \"span\", 5);\n        i0.ɵɵtext(6, \"\\u00D7\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"span\", 6);\n        i0.ɵɵtext(8, \"Close\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(9, \"i\", 7);\n        i0.ɵɵelementStart(10, \"h5\", 8);\n        i0.ɵɵtext(11, \"My Practices\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"small\");\n        i0.ɵɵtext(13, \"You can change practice anytime.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 11)(17, \"label\");\n        i0.ɵɵtext(18, \"Select Practice\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"ngx-select\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function ChangePracticeComponent_Template_ngx_select_ngModelChange_19_listener($event) {\n          return ctx.PracticeCode = $event;\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(20, \"div\", 13)(21, \"div\", 14)(22, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function ChangePracticeComponent_Template_button_click_22_listener() {\n          return ctx.onChangePractice();\n        });\n        i0.ɵɵtext(23, \"Ok\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(19);\n        i0.ɵɵproperty(\"ngModel\", ctx.PracticeCode)(\"items\", ctx.loggedInUser.Practices)(\"allowClear\", false);\n      }\n    }\n  });\n  return ChangePracticeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}