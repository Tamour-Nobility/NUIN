{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { EncryptDecryptService } from '../services/encrypt-decrypt.service';\nimport { environment } from '../../environments/environment';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/encrypt-decrypt.service\";\nexport let EncryptDecryptAuthInterceptor = /*#__PURE__*/(() => {\n  class EncryptDecryptAuthInterceptor {\n    constructor(encryptDecryptService) {\n      this.encryptDecryptService = encryptDecryptService;\n      // If you want to some exclude api call from Encryption then add here like that.\n      // environment.basUrl is your API URL\n      this.ExcludeURLList = [environment.baseUrl + \"/Common/commonFileuploaddata\", environment.baseUrl + \"/Users/UploadProfilePicture\", environment.baseUrl + \"/Common/downloadattachedfile\", environment.baseUrl + \"/patientattachments/Attach\", environment.baseUrl + \"/patientattachments/GetAll\", environment.baseUrl + \"/patientattachments/GetAttachmentCodeList\", environment.baseUrl + \"/ERA/Import\", environment.baseUrl + \"/ERA/WeekHistoryOfERA\"];\n    }\n    intercept(req, next) {\n      let exludeFound = this.ExcludeURLList.filter(element => {\n        return req.url.includes(element);\n      });\n      // We have Encrypt the GET and POST call before pass payload to API\n      if (!(exludeFound.length > 0)) {\n        if (req.method == \"GET\") {\n          if (req.url.indexOf(\"?\") > 0) {\n            let encriptURL = req.url.substr(0, req.url.indexOf(\"?\") + 1) + this.encryptDecryptService.encryptUsingAES256(req.url.substr(req.url.indexOf(\"?\") + 1, req.url.length));\n            const cloneReq = req.clone({\n              url: encriptURL\n            });\n            return next.handle(cloneReq).pipe(tap(event => {\n              if (event instanceof HttpResponse) {}\n            }), catchError(err => {\n              if (err instanceof HttpErrorResponse) {} else {\n                return throwError(err);\n              }\n            }));\n          }\n          return next.handle(req);\n        } else if (req.method == \"POST\") {\n          if (req.body || req.body.length > 0) {\n            const cloneReq = req.clone({\n              body: this.encryptDecryptService.encryptUsingAES256(req.body)\n            });\n            return next.handle(cloneReq).pipe(tap(event => {\n              if (event instanceof HttpResponse) {}\n            }), catchError(err => {\n              if (err instanceof HttpErrorResponse) {} else {\n                return throwError(err);\n              }\n            }));\n            //     return next.handle(cloneReq).pipe(\n            //         switchMap((data) => next.handle(data)),\n            //         switchMap((event) =>\n            //           event instanceof HttpResponse\n            //             ? from(this.encryptDecryptService.encryptUsingAES256(event))\n            //             : of(event)\n            //         )\n            //       );\n            // }\n            let data = req.body;\n            return next.handle(req);\n          }\n        } else {\n          return next.handle(req);\n        }\n      }\n      return next.handle(req);\n    }\n  }\n  EncryptDecryptAuthInterceptor.ɵfac = function EncryptDecryptAuthInterceptor_Factory(t) {\n    return new (t || EncryptDecryptAuthInterceptor)(i0.ɵɵinject(i1.EncryptDecryptService));\n  };\n  EncryptDecryptAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EncryptDecryptAuthInterceptor,\n    factory: EncryptDecryptAuthInterceptor.ɵfac\n  });\n  return EncryptDecryptAuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}