{"ast":null,"code":"var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { ToastrService } from 'ngx-toastr';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport { Common } from '../../services/common/common';\nimport { APIService } from '../../components/services/api.service';\nimport { FileHandlerService } from '../../components/services/file-handler/filehandler.service';\nconst validMimeTypes = [\"image/jpg\", \"image/png\", \"image/gif\", \"image/jpeg\", 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/plain', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\nconst maximumFileSize = 20000000;\nlet PatientAttachmentsComponent = class PatientAttachmentsComponent {\n  constructor(toastr, _apiService, _fileHandlerService, _chRef) {\n    this.toastr = toastr;\n    this._apiService = _apiService;\n    this._fileHandlerService = _fileHandlerService;\n    this._chRef = _chRef;\n    this.onHidden = new EventEmitter();\n    this.attachmentTypesList = [];\n    this.attachments = [];\n    this.uploading = false;\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.form = new FormGroup({\n      attachment: new FormControl(null),\n      attachmentTypeCode: new FormControl(null, [Validators.required])\n    });\n  }\n  show() {\n    this.patientAttachment.show();\n  }\n  hide() {\n    this.patientAttachment.hide();\n  }\n  onPatientAttachmentsShown() {\n    if (!Common.isNullOrEmpty(this.PatientAccount)) {\n      this.getPatientAttachments();\n      this.getAttachmentTypeCodes();\n    }\n  }\n  getPatientAttachments() {\n    this._apiService.getData(`/patientattachments/GetAll?patientAccount=${this.PatientAccount}`).subscribe(res => {\n      if (this.datatablePatientAttachments) {\n        this._chRef.detectChanges();\n        this.datatablePatientAttachments.destroy();\n      }\n      this.attachments = res.Response;\n      this._chRef.detectChanges();\n      const table = $('.datatablePatientAttachments');\n      this.datatablePatientAttachments = table.DataTable({\n        columnDefs: [{\n          orderable: false,\n          targets: -1\n        }],\n        order: [3, 'desc'],\n        language: {\n          emptyTable: \"No data available\"\n        }\n      });\n    });\n  }\n  getAttachmentTypeCodes() {\n    this._apiService.getData('/patientattachments/GetAttachmentCodeList').subscribe(res => {\n      this.attachmentTypesList = res.Response;\n    });\n  }\n  onPatientAttachmentsHidden() {\n    this.selectedFile = null;\n    this.form.reset();\n    this.uploading = false;\n  }\n  onChangeFile(event) {\n    this.selectedFile = null;\n    const {\n      files\n    } = event.target;\n    if (files.length === 0) {\n      this.toastr.warning('Please choose file to upload.', 'File Missing');\n      return;\n    }\n    const file = files[0];\n    const {\n      size,\n      type\n    } = file;\n    if (!validMimeTypes.includes(type)) {\n      this.toastr.warning('Please choose file with type JPG, PNG, GIF, DOC, DOCX, PDF, XLS, XLSX or TXT', 'File Type');\n      return;\n    }\n    if (size > maximumFileSize) {\n      this.toastr.warning('Maximum file size 20Mb.', 'File Size');\n      return;\n    }\n    this.selectedFile = file;\n  }\n  onUpload() {\n    if (!this.form.controls[\"attachmentTypeCode\"].value) {\n      this.toastr.warning('Please choose attachment type.', 'Attachment Type');\n      return;\n    }\n    if (!this.selectedFile) {\n      this.toastr.warning('Please choose file.', 'File Missing');\n      return;\n    }\n    this.uploading = true;\n    const formData = new FormData();\n    console.log(\"data \" + formData);\n    formData.append(\"TypeCode\", this.form.controls[\"attachmentTypeCode\"].value);\n    formData.append(\"PatientAccount\", this.PatientAccount.toString());\n    formData.append(this.selectedFile.name, this.selectedFile);\n    this._fileHandlerService.UploadFile(formData, '/patientattachments/Attach').subscribe(res => {\n      if (res.Status === \"success\") {\n        this.form.reset();\n        this.selectedFile = null;\n        this.uploading = false;\n        this.getPatientAttachments();\n      } else {\n        this.toastr.error(res.Response, 'Upload Failure');\n      }\n    }, error => {\n      this.uploading = false;\n    });\n  }\n  onDelete(id) {\n    this._apiService.getData(`/patientattachments/delete?id=${id}`).subscribe(res => {\n      if (res.Status === 'success') {\n        this.toastr.success('Attachment has been deleted.', 'Deleted Attachment');\n        this.getPatientAttachments();\n      }\n    });\n  }\n  onDownload(id, fileName) {\n    this._apiService.downloadFile(`/patientattachments/Download?id=${id}`).subscribe(response => {\n      let blob = new Blob([response]);\n      saveAs(blob, fileName);\n    }), error => {\n      console.info('File download error');\n    }, () => console.info('File downloaded successfully');\n  }\n  getFileDisplayName() {\n    if (this.selectedFile && this.selectedFile.name) {\n      if (this.selectedFile.name.length > 25) return this.selectedFile.name.substr(0, 24);\n      return this.selectedFile.name;\n    }\n  }\n};\n__decorate([Input(), __metadata(\"design:type\", Array)], PatientAttachmentsComponent.prototype, \"ExcludedClaimsIds\", void 0);\n__decorate([Input('PatientAccount'), __metadata(\"design:type\", Number)], PatientAttachmentsComponent.prototype, \"PatientAccount\", void 0);\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], PatientAttachmentsComponent.prototype, \"onHidden\", void 0);\n__decorate([ViewChild(ModalDirective), __metadata(\"design:type\", typeof (_b = typeof ModalDirective !== \"undefined\" && ModalDirective) === \"function\" ? _b : Object)], PatientAttachmentsComponent.prototype, \"patientAttachment\", void 0);\nPatientAttachmentsComponent = __decorate([Component({\n  selector: 'patient-attachments',\n  templateUrl: './patient-attachments.component.html',\n  styleUrls: ['./patient-attachments.component.css']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _a : Object, APIService, FileHandlerService, ChangeDetectorRef])], PatientAttachmentsComponent);\nexport { PatientAttachmentsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}