{"ast":null,"code":"import { throwError as observableThrowError, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { GvarsService } from '../../services/G_vars/gvars.service';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { environment } from '../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../services/G_vars/gvars.service\";\nexport let APIService = /*#__PURE__*/(() => {\n  class APIService {\n    constructor(httpClient, Gv, router, spinner) {\n      this.httpClient = httpClient;\n      this.Gv = Gv;\n      this.router = router;\n      this.spinner = spinner;\n      //countassigned: CountAssignedtasks[];\n      this.count = 0;\n      //this.countassigned=[];\n      // this.GetUsers();\n    }\n\n    downloadFile(url) {\n      this.spinner.show();\n      return this.httpClient.get(environment.baseUrl + url, {\n        responseType: 'blob'\n      }).pipe(map(data => {\n        this.spinner.hide();\n        return data;\n      }), catchError(e => this.HttpErrHandler(e)));\n    }\n    downloadFilePost(url, body) {\n      this.spinner.show();\n      return this.httpClient.post(environment.baseUrl + url, body, {\n        responseType: 'blob'\n      }).pipe(map(data => {\n        this.spinner.hide();\n        return data;\n      }), catchError(e => this.HttpErrHandler(e)));\n    }\n    getData(url) {\n      debugger;\n      this.spinner.show();\n      return this.httpClient.get(environment.baseUrl + url).pipe(map(data => {\n        this.spinner.hide();\n        return data;\n      }), catchError(e => this.HttpErrHandler(e)));\n    }\n    getDataUser(url) {\n      this.spinner.show();\n      return this.httpClient.get(environment.baseUrl + url).pipe(map(data => {\n        return data;\n      }), catchError(e => this.HttpErrHandler(e)));\n    }\n    PostData(url, data, cb, options) {\n      this.spinner.show();\n      if (options == null) {\n        return this.httpClient.post(environment.baseUrl + url, data).subscribe(data => {\n          this.spinner.hide();\n          cb(JSON.parse(JSON.stringify(data)));\n        }, error => this.HttpErrHandler(error));\n      } else {\n        return this.httpClient.post(environment.baseUrl + url, data, options).subscribe(data => {\n          this.spinner.hide();\n          cb(JSON.parse(JSON.stringify(data)));\n        }, error => this.HttpErrHandler(error));\n      }\n    }\n    getDataWithoutSpinner(url) {\n      return this.httpClient.get(environment.baseUrl + url).pipe(map(data => {\n        this.spinner.hide();\n        return data;\n      }), catchError(e => this.HttpErrHandler(e)));\n    }\n    PostDataWithoutSpinner(url, data, cb) {\n      return this.httpClient.post(environment.baseUrl + url, data).subscribe(data => {\n        this.spinner.hide();\n        cb(JSON.parse(JSON.stringify(data)));\n      }, error => this.HttpErrHandler(error));\n    }\n    PostDataWithoutSpinnerERA(url, data, cb) {\n      return this.httpClient.post(environment.baseUrl + url, data).subscribe(data => {\n        this.spinner.hide();\n        cb(JSON.parse(JSON.stringify(data)));\n      }, error => {\n        localStorage.setItem('ERAInProcess', JSON.stringify(false));\n        console.log(\"ERA error\", error);\n        this.HttpErrHandler(error);\n      });\n    }\n    HttpErrHandler(res) {\n      let errMsg;\n      if (res.status === 404) {\n        // do NotFound stuff here\n        errMsg = 'NotFound Http Error ';\n      } else if (res.status === 401) {\n        // do Unauthorized stuff here\n        this.spinner.hide();\n        errMsg = 'Unauthorized user .. please login to continue ';\n        return this.router.navigate(['/login']);\n      } else {\n        errMsg = res.status + ' unknown Http Error';\n      }\n      return observableThrowError(errMsg);\n    }\n    ParseArr(arr, def) {\n      return arr ? typeof arr == 'string' ? JSON.parse(arr) : arr : def;\n    }\n    confirmFun(t, b, cb) {\n      swal({\n        title: t,\n        text: b,\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes!',\n        cancelButtonText: 'No, keep it'\n      }).then(() => {\n        if (cb) {\n          cb();\n        }\n      }, () => {});\n    }\n    deleteRows(rowIds) {\n      debugger;\n      const apiUrl = '/demographic/deleteRows'; // Replace with your actual API endpoint\n      return this.httpClient.post(apiUrl, {\n        ids: rowIds\n      }).pipe(catchError(error => {\n        console.error('Error during deletion', error);\n        return throwError(error);\n      }));\n    }\n  }\n  APIService.ɵfac = function APIService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  APIService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: APIService,\n    factory: APIService.ɵfac\n  });\n  return APIService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}