{"ast":null,"code":"var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { ChangeDetectorRef, Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { GvarsService } from '../app/services/G_vars/gvars.service';\nimport { CurrentUserViewModel } from './models/auth/auth';\nimport { JwtHelper } from 'angular2-jwt';\nimport { AuthService } from './services/auth/auth.service';\nimport { Common } from './services/common/common';\nlet AppComponent = class AppComponent {\n  constructor(router, GV, authService, cd, route) {\n    this.router = router;\n    this.GV = GV;\n    this.authService = authService;\n    this.cd = cd;\n    this.route = route;\n    this.jwtHelper = new JwtHelper();\n  }\n  ngOnInit() {\n    $(document).ready(function () {\n      //     $(\"body\").toggleClass.remove(\"mini-navbar\");\n      $('.navbar-minimalize').on('click', function (event) {\n        event.preventDefault();\n        $(\"body\").toggleClass(\"mini-navbar\");\n        SmoothlyMenu();\n      });\n    });\n    function SmoothlyMenu() {\n      if (!$('body').hasClass('mini-navbar') || $('body').hasClass('body-small')) {\n        // Hide menu in order to smoothly turn on when maximize menu\n        $('#side-menu').hide();\n        // For smoothly turn on menu\n        setTimeout(function () {\n          $('#side-menu').fadeIn(400);\n        }, 200);\n      } else if ($('body').hasClass('fixed-sidebar')) {\n        $('#side-menu').hide();\n        setTimeout(function () {\n          $('#side-menu').fadeIn(400);\n        }, 100);\n      } else {\n        // Remove all inline style from jquery fadeIn function to reset menu state\n        $('#side-menu').removeAttr('style');\n      }\n    }\n    const userObj = this.authService.getTokenFromLS();\n    if (userObj) {\n      debugger;\n      this.GV.currentUser = new CurrentUserViewModel();\n      let decStr = this.jwtHelper.decodeToken(userObj.jwt);\n      this.GV.currentUser.exp = decStr.exp;\n      this.GV.currentUser.iat = decStr.iat;\n      this.GV.currentUser.nbf = decStr.nbf;\n      this.GV.currentUser.role = decStr.role;\n      this.GV.currentUser.userId = decStr.UserId;\n      this.GV.currentUser.unique_name = decStr.unique_name;\n      this.GV.currentUser.Practices = userObj.practices;\n      if (this.GV.currentUser.Practices.length > 0) {\n        var selectedPractice = this.authService.getPractice();\n        if (selectedPractice) this.GV.currentUser.selectedPractice = selectedPractice;else this.GV.currentUser.selectedPractice = this.GV.currentUser.Practices[0];\n      }\n      this.GV.currentUser.RolesAndRights = userObj.roleAndRights;\n      if (this.GV.currentUser.RolesAndRights.length > 0) {\n        localStorage.setItem('loginStatus', '1');\n        this.GV.currentUser.Menu = this.GV.currentUser.RolesAndRights.map(r => r.ModuleName);\n        this.GV.currentUser.Menu = this.GV.currentUser.Menu.filter(Common.Distinct);\n        if (this.GV.isReportingPerson()) this.authService.GetAuthorizedRoute(\"reporting\");\n      }\n    } else {\n      this.router.navigate(['/login']);\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof Router !== \"undefined\" && Router) === \"function\" ? _a : Object, GvarsService, AuthService, ChangeDetectorRef, typeof (_b = typeof ActivatedRoute !== \"undefined\" && ActivatedRoute) === \"function\" ? _b : Object])], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}