{"ast":null,"code":"import { throwError as observableThrowError, BehaviorSubject, throwError } from 'rxjs';\nimport { GvarsService } from '../G_vars/gvars.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { map, catchError } from 'rxjs/operators';\nimport { TokenRequestModel } from '../../models/token/token.model';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../G_vars/gvars.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, router, Gv) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.Gv = Gv;\n      this.loginStatus = new BehaviorSubject(this.checkLoginStatus());\n    }\n    checkLoginStatus() {\n      let loginCookie = localStorage.getItem(\"loginStatus\");\n      if (loginCookie == \"1\") {\n        if (localStorage.getItem('jwt') != null && localStorage.getItem('jwt') != undefined) {\n          return true;\n        }\n        return false;\n      }\n    }\n    Token(tokenRequestModel) {\n      return this.httpClient.post(environment.baseUrl + `/Token/Auth`, tokenRequestModel).pipe(map(res => {\n        return res;\n      }), catchError(e => throwError(e)));\n    }\n    Resend(url) {\n      return this.httpClient.get(environment.baseUrl + url).pipe(map(res => {\n        return res;\n      }), catchError(e => throwError(e)));\n    }\n    Code(accessViewModel) {\n      debugger;\n      return this.httpClient.post(environment.baseUrl + `/Token/AuthCode`, accessViewModel).pipe(map(res => {\n        this.loginStatus.next(true);\n        return res;\n      }), catchError(e => throwError(e)));\n    }\n    GetNewRefreshToken() {\n      let request = new TokenRequestModel();\n      request.Refresh_token = localStorage.getItem('refreshToken');\n      request.Grant_Type = 'refresh_token';\n      return this.httpClient.post(`${environment.baseUrl}/Token/Auth`, request).pipe(map(result => {\n        if (result) {\n          this.loginStatus.next(true);\n          localStorage.setItem('loginStatus', '1');\n          localStorage.setItem('jwt', result.Access_Token);\n          localStorage.setItem('username', result.Username);\n          localStorage.setItem('refreshToken', result.Refresh_Token);\n        }\n        return result;\n      }));\n    }\n    get getHttpOptions() {\n      return {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('cu')}`,\n          'Accept': 'application/json'\n        })\n      };\n    }\n    get getHttpOptionsWithNoToken() {\n      return {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    HttpErrHandler(res) {\n      let errMsg;\n      if (res.status === 404) {\n        errMsg = 'NotFound Http Error ';\n      } else if (res.status === 401) {\n        errMsg = 'Invalid username or password';\n      } else {\n        errMsg = res.status + ' Unknown Http Error';\n      }\n      return observableThrowError(errMsg);\n    }\n    Logout() {\n      localStorage.clear();\n      this.router.navigate(['/login']);\n    }\n    GetAuthorizedRoute(module) {\n      module = module.toLowerCase();\n      let route = '';\n      switch (module) {\n        case 'dashboard':\n          route = '/';\n          break;\n        case 'edi setup':\n          route = '/EDISetup/ClaimSubmission';\n          break;\n        case 'facility':\n          route = '/Facility';\n          break;\n        case 'fee schedule':\n          route = '/FeeSchedule/Standard';\n          break;\n        case 'guarantor':\n          route = '/guarantor';\n          break;\n        case 'insurance setup':\n          route = '/InsuranceSetup/insGroup';\n          break;\n        case 'office management':\n          route = '/OfficeMGM';\n          break;\n        case 'patient search':\n          route = 'patient/PatientSearch';\n          break;\n        case 'Referral Physicians':\n          route = 'referal/physician';\n          break;\n        case 'practice setup':\n          route = '/PracticeList';\n          break;\n        case 'procedures':\n          route = '/procedures';\n          break;\n        case 'reports':\n          route = '/ReportSetup/AgingSummary';\n          break;\n        case 'users management':\n          route = '/users/module';\n          break;\n        case 'claim submission':\n          route = '/claimsubmission/eraimport';\n          break;\n        // case 'Tasks':\n        // route = \"/Tasks\";\n        // break;\n        case 'reporting':\n          route = \"/reporting/charges/overall\";\n          break;\n        default:\n          route = '/';\n      }\n      this.router.navigate([route]);\n    }\n    getTokenFromLS() {\n      var refreshToken = localStorage.getItem(\"refreshToken\");\n      var jwt = localStorage.getItem(\"jwt\");\n      var practices = JSON.parse(localStorage.getItem(\"pr\"));\n      var roleAndRights = JSON.parse(localStorage.getItem(\"rr\"));\n      if (jwt && refreshToken && practices && roleAndRights) return {\n        jwt,\n        refreshToken,\n        practices: practices,\n        roleAndRights: roleAndRights\n      };\n      localStorage.removeItem(\"refreshToken\");\n      localStorage.removeItem(\"jwt\");\n      localStorage.removeItem(\"pr\");\n      localStorage.removeItem(\"rr\");\n      return null;\n    }\n    setPractice(practice) {\n      if (practice) localStorage.setItem(\"sp\", JSON.stringify(practice));\n    }\n    getPractice() {\n      debugger;\n      var practice = localStorage.getItem(\"sp\");\n      if (practice) return JSON.parse(practice);\n      return null;\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}