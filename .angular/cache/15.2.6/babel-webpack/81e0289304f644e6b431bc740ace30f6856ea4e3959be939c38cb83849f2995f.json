{"ast":null,"code":"var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ChangeDetectorRef } from '@angular/core';\nimport { ClaimAssigneeForUser } from '../Classes/claimlevel-models';\nimport { APIService } from '../../components/services/api.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { GvarsService } from '../../services/G_vars/gvars.service';\nimport { Common } from '../../services/common/common';\nimport { environment } from '../../../environments/environment';\nlet ClaimLevelComponent = class ClaimLevelComponent {\n  constructor(API, toaster, router, Gv, chref) {\n    this.API = API;\n    this.toaster = toaster;\n    this.router = router;\n    this.Gv = Gv;\n    this.chref = chref;\n    this.selectedId = 0;\n    this.fieldvisible = false;\n    this.usersSelectList = [];\n    this.selecteduserslist = [];\n    this.claimassigneenotes = [];\n    this.claimusers = new ClaimAssigneeForUser();\n    this.API.getData('/ClaimAssignment/GetAllAssignedClaims?practice_code=' + this.Gv.currentUser.selectedPractice.PracticeCode + '&assignedByuserid=' + 0).subscribe(data => {\n      if (data.Status == 'Success') {\n        if (this.ClaimlevelTable) {\n          this.ClaimlevelTable.destroy();\n        }\n        this.claimusers = data.Response;\n        this.chref.detectChanges();\n        this.ClaimlevelTable = $('.ClaimlevelTable').DataTable({\n          columnDefs: [{\n            orderable: true,\n            targets: [0, 1, 2, 7, -1, -2]\n          }],\n          language: {\n            emptyTable: \"No data available\"\n          }\n        });\n      }\n    });\n  }\n  ngOnInit() {\n    this.GetUsers();\n  }\n  onSelected(Id) {\n    console.log(Id);\n    if (Id == \"All\") {\n      this.API.getData(`/ClaimAssignment/GetAllAssignedClaimsForPractice?practice_code=${this.Gv.currentUser.selectedPractice.PracticeCode}`).subscribe(data => {\n        if (data.Status == 'Success') {\n          if (this.ClaimlevelTable) {\n            this.ClaimlevelTable.destroy();\n          }\n          this.claimusers = data.Response;\n          this.chref.detectChanges();\n          this.ClaimlevelTable = $('.ClaimlevelTable').DataTable({\n            columnDefs: [{\n              orderable: true,\n              targets: [0, 1, 2, 7, -1, -2]\n            }],\n            language: {\n              emptyTable: \"No data available\"\n            }\n          });\n        }\n      });\n    } else {\n      this.API.getData('/ClaimAssignment/GetAllAssignedClaims?practice_code=' + this.Gv.currentUser.selectedPractice.PracticeCode + '&assignedByuserid=' + Id).subscribe(data => {\n        if (data.Status == 'Success') {\n          if (this.ClaimlevelTable) {\n            this.ClaimlevelTable.destroy();\n          }\n          this.claimusers = data.Response;\n          this.chref.detectChanges();\n          this.ClaimlevelTable = $('.ClaimlevelTable').DataTable({\n            columnDefs: [{\n              orderable: true,\n              targets: [0, 1, 2, 7, -1, -2]\n            }],\n            language: {\n              emptyTable: \"No data available\"\n            }\n          });\n        }\n      });\n    }\n  }\n  GetUsers() {\n    this.API.getData(`/ClaimAssignment/GetUsersList?practicecode=${this.Gv.currentUser.selectedPractice.PracticeCode}`).subscribe(res => {\n      if (res.Status == 'Success') {\n        this.selecteduserslist = res.Response;\n      } else {\n        this.usersSelectList = [];\n        this.toaster.error(res.Status, 'Error');\n      }\n    });\n  }\n  movetoclaim(Claim_no, PatientFullNamee, Patient_Account, ID) {\n    console.log(PatientFullNamee);\n    var n = PatientFullNamee.split(',');\n    var First_Name = n[0];\n    var Last_Name = n[1];\n    const url = this.router.serializeUrl(this.router.createUrlTree(['/Patient/Demographics/ClaimDetail/', Common.encodeBase64(JSON.stringify({\n      Patient_Account: Patient_Account,\n      claimNo: Claim_no,\n      disableForm: false,\n      PatientLastName: Last_Name,\n      PatientFirstName: First_Name,\n      assigneeID: ID\n    }))]));\n    // const url_var = window.location.origin;\n    // const newurl= url_var +'/#'+ url;\n    //const newurl = environment.localUrl + url;\n    //window.open(newurl, '_blank');\n    const newurl = environment.localUrl + url;\n    window.open(newurl, '_parent');\n  }\n  viewclaimassigneenotes(id) {\n    this.API.getData(`/ClaimAssignment/GetSpecificAssignedClaimNotes?ClaimAssignee_notes_ID=${id}`).subscribe(res => {\n      if (res.Status == \"Success\") {\n        this.claimassigneenotes = res.Response;\n        console.log(this.claimassigneenotes);\n      } else {\n        this.toaster.error(res.Status, 'Error');\n      }\n    });\n  }\n};\nClaimLevelComponent = __decorate([Component({\n  selector: 'app-claim-level',\n  templateUrl: './claim-level.component.html',\n  styleUrls: ['./claim-level.component.css']\n}), __metadata(\"design:paramtypes\", [APIService, typeof (_a = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _a : Object, typeof (_b = typeof Router !== \"undefined\" && Router) === \"function\" ? _b : Object, GvarsService, ChangeDetectorRef])], ClaimLevelComponent);\nexport { ClaimLevelComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}