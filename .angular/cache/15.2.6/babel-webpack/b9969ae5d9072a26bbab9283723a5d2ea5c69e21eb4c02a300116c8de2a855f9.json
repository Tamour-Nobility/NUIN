{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { tap, catchError, switchMap, finalize, filter, take } from 'rxjs/operators';\nimport { AuthService } from '../services/auth/auth.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth/auth.service\";\nexport let JWTInterceptors = /*#__PURE__*/(() => {\n  class JWTInterceptors {\n    constructor(authService, spinner, toastService) {\n      this.authService = authService;\n      this.spinner = spinner;\n      this.toastService = toastService;\n      this.isTokenRefreshing = false;\n      this.tokenSubject = new BehaviorSubject(null);\n    }\n    intercept(req, next) {\n      if (req.url.includes('/Token/Auth')) {\n        return next.handle(req).pipe(catchError(e => this.HttpErrHandler(e)));\n      }\n      return next.handle(this.attachTokenRequest(req)).pipe(tap(event => {\n        if (event instanceof HttpResponse) {}\n      }), catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          switch (err.status) {\n            case 401:\n              {\n                this.spinner.hide();\n                return this.handleHttpResponseError(req, next);\n              }\n            case 400:\n              {\n                this.spinner.hide();\n              }\n            case 404:\n              {\n                this.spinner.hide();\n                this.toastService.error(err.statusText, err.status + \"\");\n              }\n            case 500:\n              {\n                this.spinner.hide();\n                this.toastService.error(err.statusText, err.status + \"\");\n              }\n            default:\n              {\n                this.spinner.hide();\n              }\n          }\n        } else {\n          return throwError(this.handleError(err.statusCode));\n        }\n      }));\n    }\n    handleError(errorResponse) {\n      let errMsg;\n      if (errorResponse.error instanceof Error) {\n        errMsg = \"An error occurred: \" + errorResponse.err.message;\n      } else {\n        errMsg = `Backend returned code ${errorResponse.status}, body was:${errorResponse.error}`;\n      }\n      return throwError(errMsg);\n    }\n    handleHttpResponseError(req, next) {\n      if (!this.isTokenRefreshing) {\n        this.isTokenRefreshing = true;\n        this.tokenSubject.next(null);\n        return this.authService.GetNewRefreshToken().pipe(switchMap(tokenResponse => {\n          if (tokenResponse) {\n            this.tokenSubject.next(tokenResponse.Access_Token);\n            localStorage.setItem('loginStatus', '1');\n            localStorage.setItem('jwt', tokenResponse.Access_Token);\n            localStorage.setItem('username', tokenResponse.Username);\n            localStorage.setItem('refreshToken', tokenResponse.Refresh_Token);\n            return next.handle(this.attachTokenRequest(req));\n          }\n          return this.authService.Logout();\n        }), catchError(err => {\n          this.authService.Logout();\n          return this.handleError(err);\n        }), finalize(() => {\n          this.isTokenRefreshing = false;\n        }));\n      } else {\n        this.isTokenRefreshing = false;\n        return this.tokenSubject.pipe(filter(token => token != null), take(1), switchMap(token => {\n          return next.handle(this.attachTokenRequest(req));\n        }));\n      }\n    }\n    HttpErrHandler(res) {\n      console.log(res.status);\n      let errMsg;\n      if (res.status === 404) {\n        errMsg = 'NotFound Http Error ';\n      } else if (res.status === 401) {\n        errMsg = 'Invalid username or password';\n      } else if (res.error.Message != null) {\n        errMsg = res.error.Message;\n        return throwError(errMsg);\n      } else {\n        errMsg = res.status + ' Unknown Http Error';\n      }\n      return throwError(res.status);\n    }\n    attachTokenRequest(req) {\n      var token = localStorage.getItem('jwt');\n      if (req.url.includes('Token/Auth')) {\n        return req.clone({\n          headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': '*',\n            'Access-Control-Allow-Headers': '*'\n          })\n        });\n      }\n      if (req.url.includes('/Demographic/UploadImage') || req.url.includes('/patientattachments/Attach')) {\n        return req.clone({\n          headers: new HttpHeaders({\n            'Authorization': `Bearer ${token}`\n          })\n        });\n      }\n      return req.clone({\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': '*',\n          'Access-Control-Allow-Headers': '*',\n          'Authorization': `Bearer ${token}`\n        })\n      });\n    }\n  }\n  JWTInterceptors.ɵfac = function JWTInterceptors_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  JWTInterceptors.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JWTInterceptors,\n    factory: JWTInterceptors.ɵfac,\n    providedIn: 'root'\n  });\n  return JWTInterceptors;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}