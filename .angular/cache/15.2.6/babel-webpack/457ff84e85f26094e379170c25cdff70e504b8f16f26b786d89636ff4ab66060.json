{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let AlphabetsWithSpace = /*#__PURE__*/(() => {\n  class AlphabetsWithSpace {\n    onkeydown(e) {\n      if (this.alphabetsWithSpace) {\n        let keycode = e.which || e.keyCode;\n        if (keycode > 64 && keycode < 91 || e.charCode > 96 && keycode < 123 || keycode == 8 || keycode == 9 || keycode == 32 ||\n        // Allow: Ctrl+A\n        keycode == 65 && e.ctrlKey === true ||\n        // Allow: Ctrl+C\n        keycode == 67 && e.ctrlKey === true ||\n        // Allow: Ctrl+X\n        keycode == 88 && e.ctrlKey === true ||\n        // Allow: home, end, left, right\n        keycode >= 35 && keycode <= 39 || keycode == 13) {\n          // let it happen, don't do anything\n          return;\n        } else {\n          e.preventDefault();\n        }\n      }\n    }\n    ondrop(e) {\n      if (this.alphabetsWithSpace) {\n        let e = event;\n        let dt = e.dataTransfer;\n        let getdata = dt.getData(\"text\");\n        var regex = RegExp(\"^[A-Za-z ]*$\");\n        if (!regex.test(getdata)) {\n          e.preventDefault();\n        }\n      }\n    }\n    onPaste(e) {\n      if (this.alphabetsWithSpace) {\n        const pastedData = e.clipboardData.getData('text');\n        var regex = RegExp(\"^[A-Za-z ]*$\");\n        if (!regex.test(pastedData)) {\n          e.preventDefault();\n        }\n      }\n    }\n  }\n  AlphabetsWithSpace.ɵfac = function AlphabetsWithSpace_Factory(t) {\n    return new (t || AlphabetsWithSpace)();\n  };\n  AlphabetsWithSpace.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AlphabetsWithSpace,\n    selectors: [[\"\", \"alphabetsWithSpace\", \"\"]],\n    hostBindings: function AlphabetsWithSpace_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function AlphabetsWithSpace_keydown_HostBindingHandler($event) {\n          return ctx.onkeydown($event);\n        })(\"drop\", function AlphabetsWithSpace_drop_HostBindingHandler($event) {\n          return ctx.ondrop($event);\n        })(\"paste\", function AlphabetsWithSpace_paste_HostBindingHandler($event) {\n          return ctx.onPaste($event);\n        });\n      }\n    },\n    inputs: {\n      alphabetsWithSpace: \"alphabetsWithSpace\"\n    }\n  });\n  return AlphabetsWithSpace;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}