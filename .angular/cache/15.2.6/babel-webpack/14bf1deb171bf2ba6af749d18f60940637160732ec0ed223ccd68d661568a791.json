{"ast":null,"code":"var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ChangeDetectorRef } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { APIService } from '../../../../components/services/api.service';\nimport { InsPayerSearchModel } from '../../classes/ins-payer-model';\nimport { Common } from '../../../../services/common/common';\nimport { TableRefreshService } from '../../../../services/data/table-refresh.service';\nimport { isNullOrUndefined } from 'util';\nlet ListInsSetupPayerComponent = class ListInsSetupPayerComponent {\n  constructor(chRef, API, router, activatedRoute, tableRefreshService) {\n    this.chRef = chRef;\n    this.API = API;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.tableRefreshService = tableRefreshService;\n    this.nameSelectList = [];\n    this.groupsSelectList = [];\n    this.insPayerSearchModel = new InsPayerSearchModel();\n    this.insPayerLIst = [];\n  }\n  ngOnInit() {\n    this.tableRefreshService.refresh.subscribe(r => {\n      if (r.name === 'insPayer') {\n        this.insPayerSearchModel.InsuranceGroupId = r.InsuranceGroup.Id;\n        this.insPayerSearchModel.InsuranceNameId = r.InsuranceName.Id;\n        if (this.groupsSelectList == null) this.groupsSelectList = [];\n        if (this.groupsSelectList.find(f => f.Id == r.InsuranceGroup.Id) == null) this.groupsSelectList.push(r.InsuranceGroup);\n        if (this.nameSelectList == null) this.nameSelectList = [];\n        if (this.nameSelectList.find(f => f.Id == r.InsuranceName.Id) == null) this.nameSelectList.push(r.InsuranceName);\n        this.GetInsPayerList(this.insPayerSearchModel.InsuranceGroupId, this.insPayerSearchModel.InsuranceNameId);\n      }\n    });\n    this.InitDatatable();\n  }\n  GetInsPayerList(Insgroup_Id, InsName_Id) {\n    this.insPayerSearchModel.InsurancePayer_Id = null;\n    this.insPayerSearchModel.InsurancePayer_State = '';\n    this.API.getData('/InsuranceSetup/GetInsurancePayerList?InsuranceGroupId=' + Insgroup_Id + '&InsuranceNameId=' + InsName_Id).subscribe(d => {\n      if (d.Status == \"Sucess\") {\n        if (this.dataTable) {\n          this.chRef.detectChanges();\n          this.dataTable.destroy();\n        }\n        this.updateTable(d.Response);\n      } else {\n        swal('Failed', d.Status, 'error');\n      }\n    });\n  }\n  updateTable(data) {\n    this.insPayerLIst = data;\n    this.chRef.detectChanges();\n    const table = $('.tblInsPayer');\n    this.dataTable = table.DataTable({\n      columnDefs: [{\n        className: 'control',\n        orderable: false,\n        targets: 0\n      }, {\n        orderable: false,\n        targets: 8\n      }],\n      language: {\n        emptyTable: \"No data available\"\n      },\n      responsive: {\n        details: {\n          type: 'column',\n          target: 0\n        }\n      },\n      order: [4, 'asc']\n    });\n  }\n  onDeleteClick(InsurancePayerId, InsuranceNameId) {\n    if (InsuranceNameId == undefined || InsuranceNameId == null || InsuranceNameId == 0) return;\n    this.API.confirmFun('Delete Payer', 'Are you sure you want to delete this item?', () => {\n      this.API.getData('/InsuranceSetup/DeleteInsurancePayer?InsurancePayerId=' + InsurancePayerId + '&InsuranceNameId=' + InsuranceNameId).subscribe(d => {\n        if (d.Status == \"Sucess\") {\n          swal('Delete Payer', 'Payer has been deleted successfully.', 'success');\n          this.onChangeInsName();\n        } else {\n          swal('Failed', d.Status, 'error');\n        }\n      });\n    });\n  }\n  onEditClick(Insgroup_Id) {\n    this.router.navigate(['edit', Insgroup_Id], {\n      relativeTo: this.activatedRoute\n    });\n  }\n  onViewClick(Insgroup_Id) {\n    this.router.navigate(['detail', Insgroup_Id], {\n      relativeTo: this.activatedRoute\n    });\n  }\n  onTypeGroups(e) {\n    if (!Common.isNullOrEmpty(e) && e.length >= 3) {\n      if (!isNullOrUndefined(this.subsGetGroups)) this.subsGetGroups.unsubscribe();\n      this.subsGetGroups = this.API.getData(`/InsuranceSetup/GetSmartInsuranceGroupsSelectList?searchText=${e}`).subscribe(d => {\n        if (d.Status == \"Success\") {\n          this.groupsSelectList = d.Response;\n        } else {\n          swal('Failed', d.Status, 'error');\n        }\n      });\n    }\n  }\n  onSelectGroup(e) {\n    this.nameSelectList = [];\n    this.insPayerSearchModel.InsuranceNameId = null;\n    this.onRemoveName(null);\n  }\n  onRemoveGroup(e) {\n    this.nameSelectList = [];\n    this.insPayerSearchModel.InsuranceNameId = null;\n    this.onRemoveName(null);\n  }\n  onTypeName(e) {\n    if (!Common.isNullOrEmpty(e) && e.length >= 3 && !Common.isNullOrEmpty(this.insPayerSearchModel.InsuranceGroupId)) {\n      if (!isNullOrUndefined(this.subsGetNames)) this.subsGetNames.unsubscribe();\n      this.subsGetNames = this.API.getData(`/InsuranceSetup/GetSmartInsuranceNameList?insuranceGroupId=${this.insPayerSearchModel.InsuranceGroupId}&searchText=${e}`).subscribe(d => {\n        if (d.Status == \"Success\") {\n          this.nameSelectList = d.Response;\n        } else {\n          swal('Failed', d.Status, 'error');\n        }\n      });\n    }\n  }\n  onSelectName(e) {\n    this.GetInsPayerList(this.insPayerSearchModel.InsuranceGroupId, this.insPayerSearchModel.InsuranceNameId);\n  }\n  onRemoveName(e) {\n    if (this.dataTable) {\n      this.chRef.detectChanges();\n      this.dataTable.destroy();\n    }\n    this.insPayerLIst = [];\n    this.chRef.detectChanges();\n    this.InitDatatable();\n  }\n  onChangeInsName() {\n    if (!Common.isNullOrEmpty(this.insPayerSearchModel.InsuranceGroupId) && !Common.isNullOrEmpty(this.insPayerSearchModel.InsuranceNameId)) {\n      this.GetInsPayerList(this.insPayerSearchModel.InsuranceGroupId, this.insPayerSearchModel.InsuranceNameId);\n    }\n  }\n  GetInsPayerById(event, value) {\n    if (value) {\n      if (event.key == \"Enter\" || event.key == \"Tab\") {\n        this.insPayerSearchModel.InsuranceGroupId = null;\n        this.insPayerSearchModel.InsuranceNameId = null;\n        this.insPayerSearchModel.InsurancePayer_State = '';\n        this.API.getData('/InsuranceSetup/GetInsPayerById?InsurancePayerId=' + value).subscribe(d => {\n          if (d.Status == \"Sucess\") {\n            if (this.dataTable) {\n              this.chRef.detectChanges();\n              this.dataTable.destroy();\n              this.insPayerLIst = [];\n            }\n            //we will not use the updatable() method here because this api call doesn't return an array rather an object\n            this.insPayerLIst.push(d.Response);\n            this.chRef.detectChanges();\n            const table = $('.tblInsPayer');\n            this.dataTable = table.DataTable({\n              columnDefs: [{\n                className: 'control',\n                orderable: false,\n                targets: 0\n              }, {\n                orderable: false,\n                targets: 8\n              }],\n              language: {\n                emptyTable: \"No data available\"\n              },\n              responsive: {\n                details: {\n                  type: 'column',\n                  target: 0\n                }\n              },\n              order: [4, 'asc']\n            });\n          } else {\n            swal('Failed', d.Status, 'error');\n          }\n        });\n      }\n    }\n  }\n  GetInsPayerByState(event, value) {\n    if (value) {\n      if (event.key == \"Enter\" || event.key == \"Tab\") {\n        this.insPayerSearchModel.InsuranceGroupId = null;\n        this.insPayerSearchModel.InsuranceNameId = null;\n        this.insPayerSearchModel.InsurancePayer_Id = null;\n        this.API.getData('/InsuranceSetup/GetInsPayerByState?InsurancePayerState=' + value).subscribe(d => {\n          if (d.Status == \"Sucess\") {\n            if (this.dataTable) {\n              this.chRef.detectChanges();\n              this.dataTable.destroy();\n            }\n            this.updateTable(d.Response);\n          } else {\n            swal('Failed', d.Status, 'error');\n          }\n        });\n      }\n    }\n  }\n  InitDatatable() {\n    this.dataTable = $('.tblInsPayer').DataTable({\n      columnDefs: [{\n        className: 'control',\n        orderable: false,\n        targets: 0\n      }, {\n        orderable: false,\n        targets: 8\n      }],\n      language: {\n        emptyTable: \"No data available\"\n      },\n      responsive: {\n        details: {\n          type: 'column',\n          target: 0\n        }\n      },\n      order: [4, 'asc']\n    });\n  }\n  onFocusIdSearch(e) {\n    this.isSeacrhId = true;\n    this.insPayerSearchModel.InsuranceGroupId = null;\n    this.insPayerSearchModel.InsuranceNameId = null;\n    this.insPayerSearchModel.InsurancePayer_State = '';\n  }\n  onBlurIdSearch(e) {\n    this.isSeacrhId = false;\n    this.insPayerSearchModel.InsurancePayer_Id = null;\n  }\n};\nListInsSetupPayerComponent = __decorate([Component({\n  selector: 'app-list-ins-setup-payer',\n  templateUrl: './list-ins-setup-payer.component.html'\n}), __metadata(\"design:paramtypes\", [ChangeDetectorRef, APIService, typeof (_a = typeof Router !== \"undefined\" && Router) === \"function\" ? _a : Object, typeof (_b = typeof ActivatedRoute !== \"undefined\" && ActivatedRoute) === \"function\" ? _b : Object, TableRefreshService])], ListInsSetupPayerComponent);\nexport { ListInsSetupPayerComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}