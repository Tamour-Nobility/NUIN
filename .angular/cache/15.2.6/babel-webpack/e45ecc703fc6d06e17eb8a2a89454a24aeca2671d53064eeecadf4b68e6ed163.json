{"ast":null,"code":"import { throwError as observableThrowError } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { GvarsService } from '../../../services/G_vars/gvars.service';\nimport { map } from 'rxjs/internal/operators/map';\nimport { catchError } from 'rxjs/internal/operators/catchError';\nimport { Router } from '@angular/router';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../../services/G_vars/gvars.service\";\nexport let FileHandlerService = /*#__PURE__*/(() => {\n  class FileHandlerService {\n    constructor(http, Gv, router) {\n      this.http = http;\n      this.Gv = Gv;\n      this.router = router;\n    }\n    UploadFile(data, url) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'multipart/form-data'\n        })\n      };\n      url = `${environment.baseUrl}${url}`;\n      return this.http.post(url, data, httpOptions).pipe(map(data => {\n        return data;\n      }), catchError(e => this.HttpErrHandler(e)));\n    }\n    HttpErrHandler(res) {\n      let errMsg;\n      if (res.status === 404) {\n        // do NotFound stuff here\n        errMsg = 'NotFound Http Error ';\n      } else if (res.status === 401) {\n        // do Unauthorized stuff here\n        errMsg = 'Unauthorized user .. please login to continue ';\n        return this.router.navigate(['/login']);\n      } else {\n        errMsg = res.status + ' unknown Http Error';\n      }\n      return observableThrowError(errMsg);\n    }\n  }\n  FileHandlerService.ɵfac = function FileHandlerService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  FileHandlerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileHandlerService,\n    factory: FileHandlerService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileHandlerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}